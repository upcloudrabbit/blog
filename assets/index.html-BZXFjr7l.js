import{_ as e,c as o,a as l,b as n,f as a,d as t,e as c,r,o as i}from"./app-CJfFg5nr.js";const B="/blog/assets/1-BwljSIBU.png",y={},d={start:"4"};function v(F,s){const p=r("font");return i(),o("div",null,[s[7]||(s[7]=l(`<p>JNI（Java Native Interface）通过 Java 方法调用使用本地代码如 C/C++ 实现的方法</p><h1 id="jdk8-生成-jni-步骤" tabindex="-1"><a class="header-anchor" href="#jdk8-生成-jni-步骤"><span>JDK8 生成 JNI 步骤</span></a></h1><ol><li>首先要在 java 文件中定义一个 native 方法</li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">package</span><span style="color:#C678DD;"> org.example.me</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> HelloWorld</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    static</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">loadLibrary</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;libHelloWorld&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> native</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> say</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;font-style:italic;"> content</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        HelloWorld</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">say</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;JNI native Hello World!&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>通过 javah 命令生成对应 C++ 的头文件<code>javah -encoding utf-8 -v -o Helloworld.h org.example.me.Helloworld</code>（这里需要使用全限定名）<code>-o</code>表示指定生成的头文件名称，否则会把全限定中的<code>.</code>改为<code>_</code>最后加上<code>.h</code>命名，参数<code>-encoding utf-8</code>用于指明文件编码防止出现编码映射错误</li><li>然后根据头文件自己创建一个 C/C++ 文件，并实现其中的方法（这里如果要正式开发则需要有 <code>jni.h</code> 文件作为参考，该文件在<code>JAVA_HOME/include</code>下。已将其复制到开发工程中）</li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E06C75;">#include </span><span style="color:#98C379;">&quot;HelloWorld.h&quot;</span></span>
<span class="line"><span style="color:#E06C75;">#include </span><span style="color:#56B6C2;">&lt;</span><span style="color:#E5C07B;">stdio</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">h</span><span style="color:#56B6C2;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//生成的头文件中方法定义是省略了参数名的，实现方法时需要加上参数名</span></span>
<span class="line"><span style="color:#E5C07B;">JNIEXPORT</span><span style="color:#C678DD;"> void</span><span style="color:#E5C07B;"> JNICALL</span><span style="color:#E5C07B;"> Java_org_example_me_HelloWorld_say</span></span>
<span class="line"><span style="color:#E06C75;">  (JNIEnv </span><span style="color:#56B6C2;">*</span><span style="color:#E06C75;"> env</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> jclass arg</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> jstring instring)</span></span>
<span class="line"><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   //将java的String对象指向的字符串拷贝一份</span></span>
<span class="line"><span style="color:#C678DD;">   const</span><span style="color:#E06C75;"> jbyte </span><span style="color:#56B6C2;">*</span><span style="color:#E06C75;">str </span><span style="color:#56B6C2;">=</span></span>
<span class="line"><span style="color:#E06C75;">        (</span><span style="color:#C678DD;">const</span><span style="color:#E06C75;"> jbyte </span><span style="color:#56B6C2;">*</span><span style="color:#E06C75;">)env</span><span style="color:#C678DD;">-&gt;</span><span style="color:#61AFEF;">GetStringUTFChars</span><span style="color:#E06C75;">(instring</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> JNI_FALSE)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   //打印字符串</span></span>
<span class="line"><span style="color:#61AFEF;">    printf</span><span style="color:#E06C75;">(</span><span style="color:#98C379;">&quot;Java_org_example_me_HelloWorld_say-&gt;%s</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">str)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //释放str指向的字符串内存</span></span>
<span class="line"><span style="color:#E06C75;">    env</span><span style="color:#C678DD;">-&gt;</span><span style="color:#61AFEF;">ReleaseStringUTFChars</span><span style="color:#E06C75;">(instring</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> (</span><span style="color:#C678DD;">const</span><span style="color:#C678DD;"> char</span><span style="color:#56B6C2;"> *</span><span style="color:#E06C75;">)str)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;"> }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6)),n("ol",d,[s[6]||(s[6]=n("li",null,[a("编写完成后开始生成"),n("code",null,"dll"),a("或"),n("code",null,"so"),a("文件，这里需要 gcc/g++（Windows 下可使用 MingGW，Linux 下可使用 GCC）执行命令"),n("code",null,"g++ -m64 -shared -I $Env:JAVA_HOME/include -I $Env:JAVA_HOME/include/win32 HelloWorld.cpp -o HelloWorld.dll"),a("（g++ 会判断 cpp 中需要的头文件自动将同一目录下的引入进来，由于头文件中需要"),n("code",null,"jni.h"),a("而 jni.h 又需要"),n("code",null,"jni_md.h"),a("因此需要指定这些文件所在的位置）")],-1)),n("li",null,[s[1]||(s[1]=a("生成最终文件后需要在对应类加载时就提前加载")),s[2]||(s[2]=n("code",null,"dll、so",-1)),s[3]||(s[3]=a("文件，可通过以下两组 API 加载（")),t(p,{style:{color:"#DF2A3F"}},{default:c(()=>s[0]||(s[0]=[a("第一种方式严格要求库文件名称为")])),_:1}),s[4]||(s[4]=n("code",null,'<font style="color:#DF2A3F;">libxxx.dll / libxxx.so</font>',-1)),s[5]||(s[5]=a("）"))])]),s[8]||(s[8]=l(`<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 该方法能加载的前提是在 JVM 启动参数上添加 -Djava.library.path=D:\\WorkSpace\\IDEA\\codexperiment\\jdk8\\src\\main\\java</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 并且对应的库文件名称必须以 lib 开头</span></span>
<span class="line"><span style="color:#E5C07B;">System</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">loadLibrary</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;libHelloWorld&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 该方法需要使用绝对路径指定库位置</span></span>
<span class="line"><span style="color:#E5C07B;">System</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">load</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;D:</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">WorkSpace</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">IDEA</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">codexperiment</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">jdk8</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">src</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">main</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">java</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">libHelloWorld.dll&quot;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 javah 生成的头文件中 C 函数名数固定的，还必须符合特定的规范。可以通过 JNIEnv 对象的<code>RegisterNatives</code>方法（<code>jdk/src/share/javavm/export/jni.h</code>）</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">jint</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">JNICALL </span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;">RegisterNatives</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    (JNIEnv </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">env, jclass clazz, </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> JNINativeMethod </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">methods,</span></span>
<span class="line"><span style="color:#ABB2BF;">     jint nMethods);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * used in RegisterNatives to describe native method name, signature,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * and function pointer.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">typedef</span><span style="color:#C678DD;"> struct</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    char</span><span style="color:#C678DD;"> *</span><span style="color:#ABB2BF;">name;</span></span>
<span class="line"><span style="color:#C678DD;">    char</span><span style="color:#C678DD;"> *</span><span style="color:#ABB2BF;">signature;</span></span>
<span class="line"><span style="color:#C678DD;">    void</span><span style="color:#C678DD;"> *</span><span style="color:#ABB2BF;">fnPtr;</span></span>
<span class="line"><span style="color:#ABB2BF;">} JNINativeMethod;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>按照函数签名，主要是 JNINativeMethod 参数需要确认。其中 name 表示 Java 方法名字符串的指针，signature 表示方法描述符字符串的指针，fnPtr 是该 Java 方法对应的本地方法实现的函数指针。signature 如果自己推断会显得比较麻烦可通<code>javap -s class文件</code>找到对应的 signature。</p><p><img src="`+B+`" alt="" width="1487" height="684"></p><p>RegisterNatives 有两种用法，一种是 JDK 的标准用法，在 Java 类中定义一个本地 registerNatives 方法，用javah 生成对应的本地方法头文件（这里指的是生成 registerNatives 方法头文件），在 registerNatives 方法中完成其他本地方法的注册，典型的如<code>java.lang.Object</code>，其定义的 registerNatives 方法如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> native</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> registerNatives</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">static</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">    registerNatives</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>本地方法实现在<code>jdk/src/share/native/java/lang/Object.c</code>中（通过<code>Java_java_lang_Object_registerNatives</code>一连注册了 5 个 native 方法）：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">#include</span><span style="color:#98C379;"> &lt;stdio.h&gt;</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#98C379;"> &lt;signal.h&gt;</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#98C379;"> &lt;limits.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#98C379;"> &quot;jni.h&quot;</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#98C379;"> &quot;jni_util.h&quot;</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#98C379;"> &quot;jvm.h&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#98C379;"> &quot;java_lang_Object.h&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">static</span><span style="color:#ABB2BF;"> JNINativeMethod methods</span><span style="color:#C678DD;">[]</span><span style="color:#C678DD;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    {</span><span style="color:#98C379;">&quot;hashCode&quot;</span><span style="color:#ABB2BF;">,    </span><span style="color:#98C379;">&quot;()I&quot;</span><span style="color:#ABB2BF;">,                    (</span><span style="color:#C678DD;">void</span><span style="color:#C678DD;"> *</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;">JVM_IHashCode},</span></span>
<span class="line"><span style="color:#ABB2BF;">    {</span><span style="color:#98C379;">&quot;wait&quot;</span><span style="color:#ABB2BF;">,        </span><span style="color:#98C379;">&quot;(J)V&quot;</span><span style="color:#ABB2BF;">,                   (</span><span style="color:#C678DD;">void</span><span style="color:#C678DD;"> *</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;">JVM_MonitorWait},</span></span>
<span class="line"><span style="color:#ABB2BF;">    {</span><span style="color:#98C379;">&quot;notify&quot;</span><span style="color:#ABB2BF;">,      </span><span style="color:#98C379;">&quot;()V&quot;</span><span style="color:#ABB2BF;">,                    (</span><span style="color:#C678DD;">void</span><span style="color:#C678DD;"> *</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;">JVM_MonitorNotify},</span></span>
<span class="line"><span style="color:#ABB2BF;">    {</span><span style="color:#98C379;">&quot;notifyAll&quot;</span><span style="color:#ABB2BF;">,   </span><span style="color:#98C379;">&quot;()V&quot;</span><span style="color:#ABB2BF;">,                    (</span><span style="color:#C678DD;">void</span><span style="color:#C678DD;"> *</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;">JVM_MonitorNotifyAll},</span></span>
<span class="line"><span style="color:#ABB2BF;">    {</span><span style="color:#98C379;">&quot;clone&quot;</span><span style="color:#ABB2BF;">,       </span><span style="color:#98C379;">&quot;()Ljava/lang/Object;&quot;</span><span style="color:#ABB2BF;">,   (</span><span style="color:#C678DD;">void</span><span style="color:#C678DD;"> *</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;">JVM_Clone},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">JNIEXPORT </span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> JNICALL</span></span>
<span class="line"><span style="color:#61AFEF;">Java_java_lang_Object_registerNatives</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">JNIEnv </span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;">env</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> jclass </span><span style="color:#E06C75;font-style:italic;">cls</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    (</span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">env)-&gt;</span><span style="color:#61AFEF;">RegisterNatives</span><span style="color:#ABB2BF;">(env, cls,</span></span>
<span class="line"><span style="color:#ABB2BF;">                            methods, </span><span style="color:#C678DD;">sizeof</span><span style="color:#ABB2BF;">(methods)</span><span style="color:#C678DD;">/sizeof</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">methods</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">]));</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">JNIEXPORT jclass JNICALL</span></span>
<span class="line"><span style="color:#61AFEF;">Java_java_lang_Object_getClass</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">JNIEnv </span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;">env</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> jobject </span><span style="color:#E06C75;font-style:italic;">this</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (this </span><span style="color:#C678DD;">==</span><span style="color:#D19A66;"> NULL</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">        JNU_ThrowNullPointerException</span><span style="color:#ABB2BF;">(env, </span><span style="color:#D19A66;">NULL</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">env)-&gt;</span><span style="color:#61AFEF;">GetObjectClass</span><span style="color:#ABB2BF;">(env, this);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第二种不通过<code>javah</code>生成头文件， 利用 JVM 加载库文件会回调库文件中的 JNI_OnLoad 方法来实现本地方法的注册，JNI_OnLoad 方法的定义在<code>jdk/src/share/javavm/export/jni.h</code>。改造后的<code>HelloWorld.cpp</code>实现如下（不再需要头文件，其它照旧）</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki one-dark-pro vp-code"><code><span class="line"></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#98C379;"> &quot;jni.h&quot;</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#98C379;"> &lt;stdio.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">JNIEXPORT </span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> JNICALL say_hello_world</span></span>
<span class="line"><span style="color:#ABB2BF;">  (JNIEnv </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;"> env, jclass arg, jstring instring);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">JNIEXPORT jint JNICALL</span></span>
<span class="line"><span style="color:#61AFEF;">JNI_OnLoad</span><span style="color:#ABB2BF;">(JavaVM </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">vm, </span><span style="color:#C678DD;">void</span><span style="color:#C678DD;"> *</span><span style="color:#ABB2BF;">reserved){</span></span>
<span class="line"><span style="color:#ABB2BF;">	    JNIEnv</span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;"> env;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	    //判断当前JDK判断是否大于1.6</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">vm</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">GetEnv</span><span style="color:#ABB2BF;">((</span><span style="color:#C678DD;">void</span><span style="color:#C678DD;"> **</span><span style="color:#ABB2BF;">)</span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">env, JNI_VERSION_1_6) </span><span style="color:#C678DD;">!=</span><span style="color:#ABB2BF;"> JNI_OK) {</span></span>
<span class="line"><span style="color:#C678DD;">			 return</span><span style="color:#C678DD;"> -</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">		JNINativeMethod </span><span style="color:#E5C07B;">nm</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E5C07B;">		nm</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">].</span><span style="color:#E06C75;">name</span><span style="color:#C678DD;"> =</span><span style="color:#98C379;"> &quot;say&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">		nm</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">].</span><span style="color:#E06C75;">signature</span><span style="color:#C678DD;"> =</span><span style="color:#98C379;"> &quot;(Ljava/lang/String;)V&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">		nm</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">].</span><span style="color:#E06C75;">fnPtr</span><span style="color:#C678DD;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">void*</span><span style="color:#ABB2BF;">)say_hello_world;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//查找特定类</span></span>
<span class="line"><span style="color:#ABB2BF;">		jclass cls </span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;"> env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">FindClass</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;org/example/me/HelloWorld&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (cls </span><span style="color:#C678DD;">==</span><span style="color:#D19A66;"> NULL</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#C678DD;">		    return</span><span style="color:#ABB2BF;"> JNI_ERR;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//注册本地方法</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">RegisterNatives</span><span style="color:#ABB2BF;">(cls, nm, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">&lt;</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#ABB2BF;"> JNI_ERR;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//返回当前库文件要求的最低JDK版本</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> JNI_VERSION_1_6;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">JNIEXPORT </span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> JNICALL say_hello_world</span></span>
<span class="line"><span style="color:#ABB2BF;">  (JNIEnv </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;"> env, jclass arg, jstring instring)</span></span>
<span class="line"><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   //将java的String对象指向的字符串拷贝一份</span></span>
<span class="line"><span style="color:#C678DD;">   const</span><span style="color:#ABB2BF;"> jbyte </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">str </span><span style="color:#C678DD;">=</span></span>
<span class="line"><span style="color:#ABB2BF;">        (</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> jbyte </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">)</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">GetStringUTFChars</span><span style="color:#ABB2BF;">(instring, JNI_FALSE);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   //打印字符串</span></span>
<span class="line"><span style="color:#61AFEF;">    printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Java_org_example_me_HelloWorld_say-&gt;</span><span style="color:#D19A66;">%s</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">,str);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //释放str指向的字符串内存</span></span>
<span class="line"><span style="color:#E5C07B;">    env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">ReleaseStringUTFChars</span><span style="color:#ABB2BF;">(instring, (</span><span style="color:#C678DD;">const</span><span style="color:#C678DD;"> char</span><span style="color:#C678DD;"> *</span><span style="color:#ABB2BF;">)str);</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;"> }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="jni-api" tabindex="-1"><a class="header-anchor" href="#jni-api"><span>JNI API</span></a></h1><h2 id="java-数据类型" tabindex="-1"><a class="header-anchor" href="#java-数据类型"><span>Java 数据类型</span></a></h2><p>Java的数据类型分为基本类型（primitive type，又称原生类型或者原始类型）和引用类型（reference type）,其中基本类型又分为数值类型，boolean 类型和 returnAddress 类型三类。returnAddress 类型在 Java 语言中没有对应的数据类型，由 JVM 使用表示指向某个字节码的指针。JVM 定义了 boolean 类型，但没有任何专供boolean 值使用的字节码指令，Java 语言表达式操作 boolea n值，都是使用 int 类型对应的字节码指令完成的，boolean 数组的访问修改共用 byte 数组的 baload 和 bstore 指令；JVM 规范中明确了 1 表示true，0 表示 false，但是未明确 boolean 类型的长度，Hotspot 使用 C++ 中无符号的 char 类型表示 boolean 类型，即boolean 类型占 8 位。数值类型分为整数类型和浮点数类型，如下：</p><p>整数类型：</p><ul><li>byte 类型：值为 8 位有符号二进制补码整数</li><li>short 类型：值为 16 位有符号二进制补码整数</li><li>int 类型：值为 32 位有符号二进制补码整数</li><li>long 类型：值为 64 位有符号二进制补码整数</li><li>char 类型：值为 16 位无符号整数，用于表示指向多文种平面的 Unicode 码点，默认值是 Unicode 的 null码点（\\u0000）</li></ul><p>浮点类型：</p><ul><li>float 类型：值为单精度浮点数集合中的元素（32 位）</li><li>double 类型：值为双精度浮点数集合中的元素（64 位）</li></ul><p>引用类型在 JVM 中有三种，类类型（class type），数组类型（array type）和接口类型（interface type），数组类型最外面的一维元素的类型称为该数组的组件类型，组件类型也可以是数组类型，如果组件类型不是元素类型则称为该数组的元素类型，引用类型其实就是 C++ 中的指针。默认开始压缩指针的情况下时 32 位，否则是 64 位。</p><p>JVM 规范中并没有强引用，软引用，弱引用和虚引用的概念，JVM 定义的引用就是强引用，软引用，弱引用和虚引用是 JDK 结合垃圾回收机制提供的功能支持而已。</p><h2 id="jni-数据类型" tabindex="-1"><a class="header-anchor" href="#jni-数据类型"><span>JNI 数据类型</span></a></h2><p>JNI 数据类型其实就是 Java 数据类型在 Hotspot 中的具体表示或者对应的 C/C++ 类型，类型的定义参考<code>hotspot/src/share/vm/prims/jni.h</code>中（从以下定义中可以看到所有的类型都继承自 _jobject）</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * JNI Types</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">#ifndef</span><span style="color:#61AFEF;"> JNI_TYPES_ALREADY_DEFINED_IN_JNI_MD_H</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">typedef</span><span style="color:#C678DD;"> unsigned</span><span style="color:#C678DD;"> char</span><span style="color:#ABB2BF;">   jboolean;</span></span>
<span class="line"><span style="color:#C678DD;">typedef</span><span style="color:#C678DD;"> unsigned</span><span style="color:#C678DD;"> short</span><span style="color:#ABB2BF;">  jchar;</span></span>
<span class="line"><span style="color:#C678DD;">typedef</span><span style="color:#C678DD;"> short</span><span style="color:#ABB2BF;">           jshort;</span></span>
<span class="line"><span style="color:#C678DD;">typedef</span><span style="color:#C678DD;"> float</span><span style="color:#ABB2BF;">           jfloat;</span></span>
<span class="line"><span style="color:#C678DD;">typedef</span><span style="color:#C678DD;"> double</span><span style="color:#ABB2BF;">          jdouble;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">typedef</span><span style="color:#ABB2BF;"> jint            jsize;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">class _jobject {};</span></span>
<span class="line"><span style="color:#ABB2BF;">class _jclass : public _jobject {};</span></span>
<span class="line"><span style="color:#ABB2BF;">class _jthrowable : public _jobject {};</span></span>
<span class="line"><span style="color:#ABB2BF;">class _jstring : public _jobject {};</span></span>
<span class="line"><span style="color:#ABB2BF;">class _jarray : public _jobject {};</span></span>
<span class="line"><span style="color:#ABB2BF;">class _jbooleanArray : public _jarray {};</span></span>
<span class="line"><span style="color:#ABB2BF;">class _jbyteArray : public _jarray {};</span></span>
<span class="line"><span style="color:#ABB2BF;">class _jcharArray : public _jarray {};</span></span>
<span class="line"><span style="color:#ABB2BF;">class _jshortArray : public _jarray {};</span></span>
<span class="line"><span style="color:#ABB2BF;">class _jintArray : public _jarray {};</span></span>
<span class="line"><span style="color:#ABB2BF;">class _jlongArray : public _jarray {};</span></span>
<span class="line"><span style="color:#ABB2BF;">class _jfloatArray : public _jarray {};</span></span>
<span class="line"><span style="color:#ABB2BF;">class _jdoubleArray : public _jarray {};</span></span>
<span class="line"><span style="color:#ABB2BF;">class _jobjectArray : public _jarray {};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">typedef</span><span style="color:#ABB2BF;"> _jobject </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">jobject;</span></span>
<span class="line"><span style="color:#C678DD;">typedef</span><span style="color:#ABB2BF;"> _jclass </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">jclass;</span></span>
<span class="line"><span style="color:#C678DD;">typedef</span><span style="color:#ABB2BF;"> _jthrowable </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">jthrowable;</span></span>
<span class="line"><span style="color:#C678DD;">typedef</span><span style="color:#ABB2BF;"> _jstring </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">jstring;</span></span>
<span class="line"><span style="color:#C678DD;">typedef</span><span style="color:#ABB2BF;"> _jarray </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">jarray;</span></span>
<span class="line"><span style="color:#C678DD;">typedef</span><span style="color:#ABB2BF;"> _jbooleanArray </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">jbooleanArray;</span></span>
<span class="line"><span style="color:#C678DD;">typedef</span><span style="color:#ABB2BF;"> _jbyteArray </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">jbyteArray;</span></span>
<span class="line"><span style="color:#C678DD;">typedef</span><span style="color:#ABB2BF;"> _jcharArray </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">jcharArray;</span></span>
<span class="line"><span style="color:#C678DD;">typedef</span><span style="color:#ABB2BF;"> _jshortArray </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">jshortArray;</span></span>
<span class="line"><span style="color:#C678DD;">typedef</span><span style="color:#ABB2BF;"> _jintArray </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">jintArray;</span></span>
<span class="line"><span style="color:#C678DD;">typedef</span><span style="color:#ABB2BF;"> _jlongArray </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">jlongArray;</span></span>
<span class="line"><span style="color:#C678DD;">typedef</span><span style="color:#ABB2BF;"> _jfloatArray </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">jfloatArray;</span></span>
<span class="line"><span style="color:#C678DD;">typedef</span><span style="color:#ABB2BF;"> _jdoubleArray </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">jdoubleArray;</span></span>
<span class="line"><span style="color:#C678DD;">typedef</span><span style="color:#ABB2BF;"> _jobjectArray </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">jobjectArray;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">typedef</span><span style="color:#ABB2BF;"> jobject jweak;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">typedef</span><span style="color:#C678DD;"> union</span><span style="color:#ABB2BF;"> jvalue {</span></span>
<span class="line"><span style="color:#ABB2BF;">    jboolean z;</span></span>
<span class="line"><span style="color:#ABB2BF;">    jbyte    b;</span></span>
<span class="line"><span style="color:#ABB2BF;">    jchar    c;</span></span>
<span class="line"><span style="color:#ABB2BF;">    jshort   s;</span></span>
<span class="line"><span style="color:#ABB2BF;">    jint     i;</span></span>
<span class="line"><span style="color:#ABB2BF;">    jlong    j;</span></span>
<span class="line"><span style="color:#ABB2BF;">    jfloat   f;</span></span>
<span class="line"><span style="color:#ABB2BF;">    jdouble  d;</span></span>
<span class="line"><span style="color:#ABB2BF;">    jobject  l;</span></span>
<span class="line"><span style="color:#ABB2BF;">} jvalue;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">struct</span><span style="color:#ABB2BF;"> _jfieldID;</span></span>
<span class="line"><span style="color:#C678DD;">typedef</span><span style="color:#C678DD;"> struct</span><span style="color:#ABB2BF;"> _jfieldID </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">jfieldID;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">struct</span><span style="color:#ABB2BF;"> _jmethodID;</span></span>
<span class="line"><span style="color:#C678DD;">typedef</span><span style="color:#C678DD;"> struct</span><span style="color:#ABB2BF;"> _jmethodID </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">jmethodID;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/* Return values from jobjectRefType */</span></span>
<span class="line"><span style="color:#C678DD;">typedef</span><span style="color:#C678DD;"> enum</span><span style="color:#ABB2BF;"> _jobjectType {</span></span>
<span class="line"><span style="color:#ABB2BF;">     JNIInvalidRefType    </span><span style="color:#C678DD;">=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">     JNILocalRefType      </span><span style="color:#C678DD;">=</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">     JNIGlobalRefType     </span><span style="color:#C678DD;">=</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">     JNIWeakGlobalRefType </span><span style="color:#C678DD;">=</span><span style="color:#D19A66;"> 3</span></span>
<span class="line"><span style="color:#ABB2BF;">} jobjectRefType;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">#endif</span><span style="color:#7F848E;font-style:italic;"> /* JNI_TYPES_ALREADY_DEFINED_IN_JNI_MD_H */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * jboolean constants</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">#define</span><span style="color:#61AFEF;"> JNI_FALSE</span><span style="color:#D19A66;"> 0</span></span>
<span class="line"><span style="color:#C678DD;">#define</span><span style="color:#61AFEF;"> JNI_TRUE</span><span style="color:#D19A66;"> 1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应关系如下表：</p><table><thead><tr><th>Java 数据类型</th><th>JNI 数据类型</th><th>x86 C++ 类型</th><th>长度</th></tr></thead><tbody><tr><td>boolean</td><td>jboolean</td><td>unsigned char</td><td>8</td></tr><tr><td>byte</td><td>jbyte</td><td>signed char</td><td>8</td></tr><tr><td>char</td><td>jchar</td><td>unsigned short</td><td>16</td></tr><tr><td>short</td><td>jshort</td><td>short</td><td>16</td></tr><tr><td>int</td><td>jint</td><td>int</td><td>16</td></tr><tr><td>long</td><td>jlong</td><td>long</td><td>64</td></tr><tr><td>float</td><td>jfloat</td><td>float</td><td>32</td></tr><tr><td>double</td><td>jdouble</td><td>double</td><td>64</td></tr><tr><td>String</td><td>jstring</td><td>_jstring *</td><td>32/64（类指针,在64位机器上默认开启指针压缩，指针长度是32位，否则是64位，不过被压缩的指针仅限于指向堆对象的指针）</td></tr><tr><td>Class</td><td>jclass</td><td>_jclass *</td><td></td></tr><tr><td>Throwable</td><td>jthrowable</td><td>_jthrowable *</td><td></td></tr><tr><td>boolean[]</td><td>jbooleanArray</td><td>_jbooleanArray *</td><td></td></tr><tr><td>byte[]</td><td>jbyteArray</td><td>_jbyteArray *</td><td></td></tr><tr><td>char[]</td><td>jcharArray</td><td>_jcharArray *</td><td></td></tr><tr><td>short[]</td><td>jshortArray</td><td>_jshortArray *</td><td></td></tr><tr><td>int[]</td><td>jintArray</td><td>_jintArray *</td><td></td></tr><tr><td>long[]</td><td>jlongArray</td><td>_jlongArray *</td><td></td></tr><tr><td>float[]</td><td>jfloatArray</td><td>_jfloatArray *</td><td></td></tr><tr><td>double[]</td><td>jdoubleArray</td><td>_jdoubleArray *</td><td></td></tr><tr><td>Object[]</td><td>jobjectArray</td><td>_jobjectArray *</td><td></td></tr></tbody></table><h2 id="api-定义" tabindex="-1"><a class="header-anchor" href="#api-定义"><span>API 定义</span></a></h2><p>本地代码调用 JNI API 的入口只有两个 JNIEnv 和 JavaVM 类，这两个都在<code>hotspot/src/share/vm/prims/jni.h</code>中定义。两者的实现其实是对结构体 JNINativeInterface_ 和 JNIInvokeInterface_ 的简单包装。注意 JVM 规范要求同一个线程内多次 JNI 调用接收的 JNIEnv 或者 JavaVM 指针都是同一个指针，且该指针只在该线程内有效，因此本地代码不能将该指针从当前线程传递到另一个线程中。</p><h2 id="异常处理" tabindex="-1"><a class="header-anchor" href="#异常处理"><span>异常处理</span></a></h2><p>所有的 JNI 方法同大多数的 C 库函数一样不检查传入的参数的正确性，这点由调用方负责检查，如果参数错误可能导致 JVM 直接宕机。大多数情况下，JNI 方法通过返回一个特定的错误码或者抛出一个 Java 异常的方式报错，调用方可以通过<code>ExceptionOccurred()</code>方法判断是否发生了异常，如本地方法调用 Java 方法，判断 Java 方法执行期间是否发生了异常，并通过该方法获取异常的详细信息。</p><p>JNI 允许本地方法抛出或者捕获 Java 异常，未被本地方法捕获的异常会向上传递给方法的调用方。本地方法有两种方式处理异常，一种是直接返回，导致异常在调用本地方法的 Java 方法中被抛出；一种是调用<code>ExceptionClear()</code>方法清除这个异常，然后继续执行本地方法的逻辑。当异常产生，本地方法必须先清除该异常才能调用其他的JNI方法，当异常尚未处理时，只有下列方法可以被安全调用：</p><ul><li>ExceptionOccurred()</li><li>ExceptionDescribe()</li><li>ExceptionClear()</li><li>ExceptionCheck()</li><li>ReleaseStringChars()</li><li>ReleaseStringUTFChars()</li><li>ReleaseStringCritical()</li><li>Release&lt;Type&gt;ArrayElements()</li><li>ReleasePrimitiveArrayCritical()</li><li>DeleteLocalRef()</li><li>DeleteGlobalRef()</li><li>DeleteWeakGlobalRef()</li><li>MonitorExit()</li><li>PushLocalFrame()</li><li>PopLocalFrame()</li></ul><p>异常处理相关 API 如下：</p><ul><li>jint Throw(JNIEnv *env, jthrowable obj); 重新抛出Java异常</li><li>jint ThrowNew(JNIEnv *env, jclass clazz,const char *message); 抛出一个指定类型和错误提示的异常</li><li>jthrowable ExceptionOccurred(JNIEnv *env); 判断当前线程是否存在未捕获的异常，如果存在则返回该异常对象，不存在返回 NULL，仅限于 A 方法调用 B 方法接受后，A 方法调用此方法判断 B 方法是否抛出异常的场景，B 方法可以本地或者 Java 方法。</li><li>void ExceptionDescribe(JNIEnv *env); 将当前线程的未捕获异常打印到系统标准错误输出流中如 stderr，如果该异常是 Throwable 的子类则实际调用该类的 printStackTrace 方法打印。注意执行过程中获取到异常实例 jthrowable 后就会调用 ExceptionClear 清除</li><li>void ExceptionClear(JNIEnv *env); 清除当前线程的未捕获异常</li><li>void FatalError(JNIEnv *env, const char *msg); 抛出一个致命异常，会直接导致 JVM 宕机</li><li>jboolean ExceptionCheck(JNIEnv *env); 检查当前线程是否存在异常，不返回具体的异常对象，若存在返回 true</li></ul><p>以下是一个 JNI 异常示例测试，dll 生成参考上一节步骤。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">package</span><span style="color:#C678DD;"> org.example.me</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> ThrowTest</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    static</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">load</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;D:</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">WorkSpace</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">IDEA</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">codexperiment</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">jdk8</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">src</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">main</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">java</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">ThrowTest.dll&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> native</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> rethrowException</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Exception</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> native</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> handlerException</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">        handlerException</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#61AFEF;">        rethrowException</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> UnsupportedOperationException</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Unsurpported ThrowTest&quot;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">#include</span><span style="color:#98C379;"> &quot;ThrowTest.h&quot;</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#98C379;"> &lt;stdio.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">JNIEXPORT </span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> JNICALL </span><span style="color:#61AFEF;">Java_org_example_me_ThrowTest_rethrowException</span><span style="color:#ABB2BF;">(JNIEnv </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;"> env,</span></span>
<span class="line"><span style="color:#ABB2BF;">		jclass cls, jthrowable e) {</span></span>
<span class="line"><span style="color:#61AFEF;">	printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Java_jni_ThrowTest_rethrowException</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">	env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">Throw</span><span style="color:#ABB2BF;">(e);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#61AFEF;"> throwNewException</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">JNIEnv</span><span style="color:#C678DD;"> *</span><span style="color:#E06C75;font-style:italic;"> env</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">	printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;throwNewException</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	jclass unsupportedExceptionCls </span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;"> env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">FindClass</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#98C379;">			&quot;java/lang/UnsupportedOperationException&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">	env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">ThrowNew</span><span style="color:#ABB2BF;">(unsupportedExceptionCls, </span><span style="color:#98C379;">&quot;throwNewException Test</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">JNIEXPORT </span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> JNICALL </span><span style="color:#61AFEF;">Java_org_example_me_ThrowTest_handlerException</span><span style="color:#ABB2BF;">(JNIEnv </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;"> env,</span></span>
<span class="line"><span style="color:#ABB2BF;">		jclass cls) {</span></span>
<span class="line"><span style="color:#61AFEF;">	throwNewException</span><span style="color:#ABB2BF;">(env);</span></span>
<span class="line"><span style="color:#ABB2BF;">	jboolean result </span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;"> env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">ExceptionCheck</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#61AFEF;">	printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;ExceptionCheck result-&gt;</span><span style="color:#D19A66;">%d</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">, result);</span></span>
<span class="line"><span style="color:#E5C07B;">	env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">ExceptionDescribe</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	result </span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;"> env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">ExceptionCheck</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#61AFEF;">	printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;ExceptionCheck for ExceptionDescribe result-&gt;</span><span style="color:#D19A66;">%d</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">, result);</span></span>
<span class="line"><span style="color:#61AFEF;">	throwNewException</span><span style="color:#ABB2BF;">(env);</span></span>
<span class="line"><span style="color:#ABB2BF;">	jthrowable e </span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;"> env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">ExceptionOccurred</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (e) {</span></span>
<span class="line"><span style="color:#61AFEF;">		printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;ExceptionOccurred not null</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">		printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;ExceptionOccurred null</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#E5C07B;">	env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">ExceptionClear</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#61AFEF;">	printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;ExceptionClear</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	e </span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;"> env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">ExceptionOccurred</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (e) {</span></span>
<span class="line"><span style="color:#61AFEF;">		printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;ExceptionOccurred not null</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">		printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;ExceptionOccurred null</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="引用类型操作-api" tabindex="-1"><a class="header-anchor" href="#引用类型操作-api"><span>引用类型操作 API</span></a></h2><p>JNI 中关于引用只有一个枚举类型<code>hotspot/src/share/vm/prims/jni.h/_jobjectType</code>jobjectRefType 表示引用类型，仅限于本地方法使用，具体如下：</p><ul><li>JNIInvalidRefType 表示无效引用</li><li>JNILocalRefType 表示本地引用，当本地方法返回后这些引用会自动回收掉，JVM在开始执行一个新的本地方法前会先执行 EnsureLocalCapacity 评估当前线程能否创建至少 16 个本地引用，然后调用 PushLocalFrame 创建一个新的用于保存该方法执行过程中的本地引用的 Frame，当本地方法结束调用 PopLocalFram 释放调用该 Frame，同时释放 Frame 中保存的即该本地方法执行过程中创建的所有本地引用。本地方法接受的 Java 对象类型参数或者返回值都是 JNILocalRefType 类型，JNI 允许开发者根据 JNILocalRefType 类型引用创建一个 JNIGlobalRefType 类型引用。大部分情形开发者依赖程序自动回收掉本地引用即可，但是部分情形下需要开发者手动显示释放本地引用，比如本地方法中访问了一个大的 Java 对象，这时会创建一个指向该对象的本地引用，如果本地方法已经不在使用该引用了，需要手动释放该引用，否则该引用会阻止垃圾回收器回收掉该对象；再比如通过本地方法遍历某个包含大量 Java 对象的数组，遍历的时候会为每个需要访问的 Java 对象创建一个本地引用，如果这些引用不手动释放而是等到方法结束才释放就会导致内存溢出问题。JNI 允许开发者在本地方法执行的任意时点删除本地引用从而允许垃圾回收器回收该引用指向的对象，为了确保这点，所有的 JNI 方法要求不能创建额外的本地引用，除非它是作为返回值。创建的本地引用只在当前线程内有效，因此不能将一个本地引用传递到另一个线程中</li><li>JNIGlobalRefType 表示全局引用，必须通过 DeleteGlobalRef 方法删除才能释放该全局引用，从而允许垃圾回收器回收该引用指向的对象</li><li>JNIWeakGlobalRefType 表示全局弱应用，只在 JVM 内部使用，跟 Java 中的弱引用一样，当垃圾回收器运行的时候，如果一个对象仅被弱全局引用所引用，则这个对象将会被回收，如果指向的对象被回收掉了，全局弱引用会指向 NULL，开发者可以通过 IsSameObject 方法判断弱引用是否等于 NULL 从而判断指向的对象是否被回收掉了。全局弱引用比 Java 中的 SoftReference 或者 WeakReference都要弱，如果都指向了同一个对象，则只有 SoftReference 或者 WeakReference 都被回收了，全局弱引用才会等于 NULL。全局弱应用跟 PhantomReferences 的交互不明确，应该避免两者间的交互</li></ul><p>综上，这里的引用其实就是 Java 中 new 一个对象返回的引用，本地引用相当于 Java 方法中的局部变量对 Java 对象实例的引用，全局引用相当于 Java 类的静态变量对Java对象实例的引用，其本质跟 C++ 智能指针模板一样，是对象指针的二次包装，通过包装避免了该指针指向的对象被垃圾回收器回收掉，因此 JNI 中通过隐晦的引用访问 Java 对象的消耗比通过指针直接访问要高点，但是这是 JVM 对象和内存管理所必须的。</p><p>相关API如下：</p><ul><li>jobject NewGlobalRef(JNIEnv *env, jobject obj); 创建一个指向 obj 的全局引用，obj 可以是本地或者全局引用，全局引用只能通过显示调用 DeleteGlobalRef() 释放。</li><li>void DeleteGlobalRef(JNIEnv *env, jobject globalRef); 删除一个全局引用</li><li>jobject NewLocalRef(JNIEnv *env, jobject ref); 创建一个指向对象ref的本地引用</li><li>void DeleteLocalRef(JNIEnv *env, jobject localRef); 删除一个本地引用</li><li>jint EnsureLocalCapacity(JNIEnv *env, jint capacity); 评估当前线程是否能够创建指定数量的本地引用，如果可以返回 0，否则返回负数并抛出 OutOfMemoryError 异常。在执行本地方法前 JVM 会自动评估当前线程能否创建至少 16 个本地引用。JVM 允许创建超过评估数量的本地引用，如果创建过多导致 JVM 内存不足 JVM 会抛出一个 FatalError。</li><li>jint PushLocalFrame(JNIEnv *env, jint capacity); 创建一个新的支持创建给定数量的本地引用的 Frame，如果可以返回 0，否则返回负数并抛出 OutOfMemoryError 异常。注意在之前的 Frame 中创建的本地引用在新的 Frame 中依然有效。</li><li>jobject PopLocalFrame(JNIEnv *env, jobject result); POP 掉当前的本地引用 Frame，然后释放其中的所有本地引用，如果 result 不为 NULL，则返回该对象在前一个即当前 Frame 之前被 push 的 Frame 中的本地引用</li><li>jweak NewWeakGlobalRef(JNIEnv *env, jobject obj); 创建一个指向对象 obj 的弱全局引用，jweak 是 jobject 的别名，如果 obj 是 null 则返回 NULL，如果内存不足则抛出 OutOfMemoryError 异常</li><li>void DeleteWeakGlobalRef(JNIEnv *env, jweak obj); 删除弱全局引用</li><li>jobjectRefType GetObjectRefType(JNIEnv* env, jobject obj); 获取某个对象引用的引用类型，JDK1.6 引入</li></ul><p>PushLocalFrame 和 PopLocalFrame 两个都是配合使用，常见于 JNI 方法执行过程中产生的本地引用需要尽快释放掉。 NewGlobalRef 的使用场景通常是初始化 C/C++ 的全局属性，需要通过全局引用确保该属性指向的某个 Java 对象实例不被垃圾回收器回收掉，使用频次不多。</p><h2 id="类和对象操作-api" tabindex="-1"><a class="header-anchor" href="#类和对象操作-api"><span>类和对象操作 API</span></a></h2><p>类操作 API ：</p><ul><li>jint GetVersion(JNIEnv *env); 获取当前 JVM 的 JNI 接口版本，该版本在 jni.cpp 中通过全局变量 CurrentVersion 指定</li><li>jclass DefineClass(JNIEnv *env, const char *name, jobject loader,const jbyte *buf, jsize bufLen); 加载某个类，name 表示类名，loader 表示类加载器实例，buf 表示 class 文件的字节数据，bufLen 表示具体的字节数，此方法跟 ClassLoader 的实现基本一致</li><li>jclass FindClass(JNIEnv *env, const char *name); 根据类名查找某个类，如果该类未加载则会调用合适的类加载器加载并链接该类。会优先使用定义了调用 FindClass 的本地方法的类的类加载器加载指定类名的类，如果是 JDK 标准类没有对应的类加载器则使用 ClassLoader.getSystemClassLoader 返回的系统类加载器加载。</li><li>jclass GetSuperclass(JNIEnv *env, jclass clazz); 获取父类，如果该类是某个接口或者是 Object 则返回 NULL</li><li>jboolean IsAssignableFrom(JNIEnv *env, jclass clazz1,jclass clazz2); 判断 clazz1 能否安全的类型转换成 clazz2</li></ul><p>对象操作 API：</p><ul><li>jobject AllocObject(JNIEnv *env, jclass clazz); 分配一个 Java 对象并返回该对象的本地引用，注意该方法并未调用任何构造方法</li><li>jobject NewObject(JNIEnv *env, jclass clazz,jmethodID methodID, ...); 调用指定的构造方法创建一个 Java 对象并返回该对象的本地引用，最后的三个点表示该构造方法的多个参数</li><li>jobject NewObjectA(JNIEnv *env, jclass clazz,jmethodID methodID, const jvalue *args); 同上，不过构造方法的入参是一个参数数组的指针</li><li>jobject NewObjectV(JNIEnv *env, jclass clazz,jmethodID methodID, va_list args);同上，不过构造参数被放在va_list列表中</li><li>jclass GetObjectClass(JNIEnv *env, jobject obj);获取Java对象所属的Java类</li><li>jboolean IsInstanceOf(JNIEnv *env, jobject obj,jclass clazz); 判断某个对象是否是某个类的实例</li><li>jboolean IsSameObject(JNIEnv *env, jobject ref1,jobject ref2); 判断两个引用是否引用相同的对象</li></ul><p>以下是一个 JNI 类和对象测试，dll 生成参考上一节步骤。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">package</span><span style="color:#C678DD;"> org.example.me</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> A</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> ObjTest</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> A</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    static</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">load</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;D:</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">WorkSpace</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">IDEA</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">codexperiment</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">jdk8</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">src</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">main</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">java</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">ObjTest.dll&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#61AFEF;"> ObjTest</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;default&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#61AFEF;"> ObjTest</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> age</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;param Construtor,age-&gt;&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> age);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> native</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> test</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Object</span><span style="color:#E06C75;font-style:italic;"> a</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">        test</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> ObjTest</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">#include</span><span style="color:#98C379;"> &quot;ObjTest.h&quot;</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#98C379;"> &lt;stdio.h&gt;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">JNIEXPORT </span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> JNICALL Java_org_example_me_ObjTest_test</span></span>
<span class="line"><span style="color:#ABB2BF;">  (JNIEnv </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;"> env, jclass jcl,jobject obj){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	jcl</span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">GetObjectClass</span><span style="color:#ABB2BF;">(obj);</span></span>
<span class="line"><span style="color:#ABB2BF;">	jclass objACls</span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">FindClass</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;org/example/me/A&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	jboolean result</span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">IsAssignableFrom</span><span style="color:#ABB2BF;">(jcl,objACls);</span></span>
<span class="line"><span style="color:#61AFEF;">	printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;IsAssignableFrom result-&gt;</span><span style="color:#D19A66;">%d</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">,result);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	jobject objTest</span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">AllocObject</span><span style="color:#ABB2BF;">(jcl);</span></span>
<span class="line"><span style="color:#61AFEF;">	printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;AllocObject succ </span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	jmethodID defaultConst</span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">GetMethodID</span><span style="color:#ABB2BF;">(jcl,</span><span style="color:#98C379;">&quot;&lt;init&gt;&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&quot;()V&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	objTest</span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">NewObject</span><span style="color:#ABB2BF;">(jcl,defaultConst);</span></span>
<span class="line"><span style="color:#61AFEF;">	printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;default construct new succ </span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	jmethodID paramConst</span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">GetMethodID</span><span style="color:#ABB2BF;">(jcl,</span><span style="color:#98C379;">&quot;&lt;init&gt;&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&quot;(I)V&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	objTest</span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">NewObject</span><span style="color:#ABB2BF;">(jcl,paramConst,</span><span style="color:#D19A66;">12</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">	printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;param construct succ new </span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	jclass superCls</span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">GetSuperclass</span><span style="color:#ABB2BF;">(jcl);</span></span>
<span class="line"><span style="color:#ABB2BF;">	jobject superObj</span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">AllocObject</span><span style="color:#ABB2BF;">(superCls);</span></span>
<span class="line"><span style="color:#ABB2BF;">	result</span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">IsInstanceOf</span><span style="color:#ABB2BF;">(superObj,objACls);</span></span>
<span class="line"><span style="color:#61AFEF;">	printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;IsInstanceOf result-&gt;</span><span style="color:#D19A66;">%d</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">,result);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	jobject objTest2</span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">NewLocalRef</span><span style="color:#ABB2BF;">(objTest);</span></span>
<span class="line"><span style="color:#ABB2BF;">	result</span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">IsSameObject</span><span style="color:#ABB2BF;">(objTest2,objTest);</span></span>
<span class="line"><span style="color:#61AFEF;">	printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;IsSameObject result-&gt;</span><span style="color:#D19A66;">%d</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">,result);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="字段和方法操作-api" tabindex="-1"><a class="header-anchor" href="#字段和方法操作-api"><span>字段和方法操作 API</span></a></h2><p>JNI 中使用 jfieldID 来标识一个某个类的字段，jmethodID 来标识一个某个类的方法，jfieldID 和 jmethodID 都是根据他们的字段名（方法名）和描述符确定的，通过 jfieldID 读写字段或者通过 jmethodID 调用方法都会避免二次查找，但是这两个 ID 不能阻止该字段或者方法所属的类被卸载，如果类被卸载了则 jfieldID 和 jmethodID 失效了需要重新计算，因此如果希望长期使用 jfieldID 和 jmethodID 则需要保持对该类的持续引用，即建立对该类的全局引用，两者的定义在<code>hotspot/src/share/vm/prims/jni.h</code>中，这两个并非常规的字符串或者数字形式的 ID，而是一个指针，指向实际保存字段信息和方法的该类的 Klass，如下：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">struct</span><span style="color:#ABB2BF;"> _jfieldID;</span></span>
<span class="line"><span style="color:#C678DD;">typedef</span><span style="color:#C678DD;"> struct</span><span style="color:#ABB2BF;"> _jfieldID </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">jfieldID;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">struct</span><span style="color:#ABB2BF;"> _jmethodID;</span></span>
<span class="line"><span style="color:#C678DD;">typedef</span><span style="color:#C678DD;"> struct</span><span style="color:#ABB2BF;"> _jmethodID </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">jmethodID;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相关的API如下：</p><ul><li>jfieldID GetFieldID(JNIEnv *env, jclass clazz,const char *name, const char *sig); 获取某个类的指定字段的jfieldID，如果该类未初始化则 GetFieldID 会触发其完成初始化，注意不能用该方法获取数组长度对应的jfieldID 进而获取数组长度而应该直接使用<code>GetArrayLength()</code>方法获取</li><li>NativeType Get&lt;type&gt;Field(JNIEnv *env, jobject obj,jfieldID fieldID); 读取某个实例指定字段的值， NativeType 和 type 是一一对应的，具体如下：</li></ul><table><thead><tr><th>Get&lt;type&gt;Field Routine Name</th><th>Native Type</th></tr></thead><tbody><tr><td>GetObjectField()</td><td>jobject</td></tr><tr><td>GetBooleanField()</td><td>jboolean</td></tr><tr><td>GetByteField()</td><td>jbyte</td></tr><tr><td>GetCharField()</td><td>jchar</td></tr><tr><td>GetShortField()</td><td>jshort</td></tr><tr><td>GetIntField()</td><td>jint</td></tr><tr><td>GetLongField()</td><td>jlong</td></tr><tr><td>GetFloatField()</td><td>jfloat</td></tr><tr><td>GetDoubleField()</td><td>jdouble</td></tr></tbody></table><ul><li>void Set&lt;type&gt;Field(JNIEnv *env, jobject obj, jfieldID fieldID,NativeType value); 改写某个实例指定字段的值，type 与 NativeType 的对应关系同上</li><li>jmethodID GetMethodID(JNIEnv *env, jclass clazz,const char *name, const char *sig); 获取某个类的指定方法的 jmethodID，如果该类未初始化则此方法会触发该类完成初始化，获取的方法可以是该类从父类继承的方法。获取构造方法时，方法名必须是 &lt;init&gt;，返回类型必须是 void (V)</li><li>NativeType Call&lt;type&gt;Method(JNIEnv *env, jobject obj,jmethodID methodID, ...)</li><li>NativeType Call&lt;type&gt;MethodA(JNIEnv *env, jobject obj,jmethodID methodID, const jvalue *args)</li><li>NativeType Call&lt;type&gt;MethodV(JNIEnv *env, jobject obj,jmethodID methodID, va_list args); 上述三个都是调用指定实例对象的指定方法，不同的是方法入参的传递方法，同之前的 NewObject 系列方法。注意如果调用的方法是从父类继承的，无论是构造方法还是普通方法，使用的 jmethodID 都必须是从 obj 获取的，而不是从父类实例获取的。NativeType 和 type 是一一对应的，如下：</li></ul><table><thead><tr><th>Call&lt;type&gt;Method Routine Name</th><th>Native Type</th></tr></thead><tbody><tr><td>CallVoidMethod() CallVoidMethodA() CallVoidMethodV()</td><td>void</td></tr><tr><td>CalObjectMethod() CalObjectMethodA() CallObjectMethodV()</td><td>jobject</td></tr><tr><td>CallBooleanMethod() CallBooleanMethodA() CallBooleanMethodV()</td><td>jboolean</td></tr><tr><td>CallByteMethod() CalByteMethodA() CallByteMethodV()</td><td>jbyte</td></tr><tr><td>CallCharMethod() CallCharMethodA() CallCharMethodV()</td><td>jchar</td></tr><tr><td>CallShortMethod() CalShortMethodA() CallShortMethodV()</td><td>jshort</td></tr><tr><td>CallIntMethod() CallIntMethodA() CalIntMethodV()</td><td>jint</td></tr><tr><td>CallLongMethod() CallLongMethodA() CallLongMethodV()</td><td>jlong</td></tr><tr><td>CallFloatMethod() CallFloatMethodA() CallFloatMethodV()</td><td>jfloat</td></tr><tr><td>CallDoubleMethod() CallDoubleMethodA() CalDoubleMethodV()</td><td>jdouble</td></tr></tbody></table><ul><li>NativeType CallNonvirtual&lt;type&gt;Method(JNIEnv *env, jobject obj,jclass clazz, jmethodID methodID, ...);</li><li>NativeType CallNonvirtual&lt;type&gt;MethodA(JNIEnv *env, jobject obj,jclass clazz, jmethodID methodID, const jvalue *args);</li><li>NativeType CallNonvirtual&lt;type&gt;MethodV(JNIEnv *env, jobject obj,jclass clazz, jmethodID methodID, va_list args); 同 Call&lt;type&gt;Method 都是调用指定类实例的指定方法，jmethodID 必须是从类实例的 jclass 获取，CallNonvirtual&lt;type&gt;Method 多了一个参数 jclass，但是 jclass 不一定是 obj 的 jclass，也可以是 obj 的父类的 jclass，无论哪一个，jmethodID 都是从指定的 jclass clazz获取的，最终调用的方法实现取决于 jmethodID。简单的说如果子类继承并改写了父类的方法，Call&lt;type&gt;Method 只能调用改写后的方法，而 CallNonvirtual&lt;type&gt;Method 即可以调用父类的原始方法，也可以调用子类的改写方法。这里的虚方法是 C++ 中的概念，C++ 中如果一个方法不是虚方法，子类继承并改写了该方法，则当子类实例向上强转成父类实例时调用的就是父类而非子类的改写方法。如果子类继承并改写的方法被定义成虚方法，则会通过虚函数表的方式保证当子类实例向上强转成父类实例时调用的依然是子类的改写方法，即所谓的多态。NativeType 和 type 的对应关系同 Call&lt;type&gt;Method</li></ul><p>注意上述方法和字段操作都是针对非静态的方法和字段的，对静态的方法和字段操作的 API 如下：</p><ul><li>jfieldID GetStaticFieldID(JNIEnv *env, jclass clazz,const char *name, const char *sig); 获取指定静态方法的 ID，同上会触发未初始化类的初始化</li><li>NativeType GetStatic&lt;type&gt;Field(JNIEnv *env, jclass clazz,jfieldID fieldID);读取指定静态字段的值， NativeType 和 type 的对应关系同 Get&lt;type&gt;Field</li><li>void SetStatic&lt;type&gt;Field(JNIEnv *env, jclass clazz,jfieldID fieldID, NativeType value); 改写指定静态字段的值，NativeType 和 type 的对应关系同 Set&lt;type&gt;Field</li><li>jmethodID GetStaticMethodID(JNIEnv *env, jclass clazz,const char *name, const char *sig); 获取指定静态方法的 ID，会导致未初始化类的初始化</li><li>NativeType CallStatic&lt;type&gt;Method(JNIEnv *env, jclass clazz,jmethodID methodID, ...);</li><li>NativeType CallStatic&lt;type&gt;MethodA(JNIEnv *env, jclass clazz,jmethodID methodID, jvalue *args);</li><li>NativeType CallStatic&lt;type&gt;MethodV(JNIEnv *env, jclass clazz,jmethodID methodID, va_list args); 上述三个方法都是调用指定静态方法</li></ul><p>注意在调用方法或者设置属性传参数时，需要密切关注参数类型，尤其是基本类型，只有字段或者方法声明明确使用了基本类型传参才能使用基本类型，否则必须通过 Integer 等包装类的构造方法将基本类型转换为对应包装类的对象；另一个需要注意的就是可变参数类型，Java 中可以传入数量可变的参数，这些参数最终会被编译器转换成一个数组，即这类参数类型实际是一个数组，因此传参时不能跟 Java 一样，而需要显示的传入一个数组类型。以下是一个 JNI 字段和方法测试，dll 生成参考上一节步骤。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">package</span><span style="color:#C678DD;"> org.example.me</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> java.util.Arrays</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> java.util.List</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> SuperA</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> say</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;say SuperA&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> add</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> a</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> b</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;SuperA add a-&gt;&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> a </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot;,b-&gt;&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> b </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot;,result-&gt;&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> (a </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> b));</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> FiledMethodTest</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> SuperA</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    static</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">load</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;D:</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">WorkSpace</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">IDEA</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">codexperiment</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">jdk8</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">src</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">main</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">java</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">FiledMethodTest.dll&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#E5C07B;"> List</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Integer</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> list</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> boolean</span><span style="color:#E06C75;"> boolField</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> byte</span><span style="color:#E06C75;"> byteField</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> char</span><span style="color:#E06C75;"> charField</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> short</span><span style="color:#E06C75;"> shortField</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> intField</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> long</span><span style="color:#E06C75;"> longField</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> float</span><span style="color:#E06C75;"> floatField</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> double</span><span style="color:#E06C75;"> doubleField</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> staticFiled</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#61AFEF;"> FiledMethodTest</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">        list </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Arrays</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">asList</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        boolField </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        byteField </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 11</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        charField </span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &#39;c&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        shortField </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 12</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        intField </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 13</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        longField </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 14</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        floatField </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 15.0f</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        doubleField </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 16.0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        staticFiled </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 17</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> say</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;say FiledMethodTest&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#E5C07B;"> List</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Integer</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#61AFEF;"> getList</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#ABB2BF;"> list;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> printList</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">List</span><span style="color:#E06C75;font-style:italic;"> list</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (list </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">            System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;list is null&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;list-&gt;&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> list);</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> printObj</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;FiledMethodTest{&quot;</span><span style="color:#56B6C2;"> +</span></span>
<span class="line"><span style="color:#98C379;">                &quot;list=&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> list </span><span style="color:#56B6C2;">+</span></span>
<span class="line"><span style="color:#98C379;">                &quot;, boolField=&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> boolField </span><span style="color:#56B6C2;">+</span></span>
<span class="line"><span style="color:#98C379;">                &quot;, byteField=&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> byteField </span><span style="color:#56B6C2;">+</span></span>
<span class="line"><span style="color:#98C379;">                &quot;, charField=&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> charField </span><span style="color:#56B6C2;">+</span></span>
<span class="line"><span style="color:#98C379;">                &quot;, shortField=&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> shortField </span><span style="color:#56B6C2;">+</span></span>
<span class="line"><span style="color:#98C379;">                &quot;, intField=&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> intField </span><span style="color:#56B6C2;">+</span></span>
<span class="line"><span style="color:#98C379;">                &quot;, longField=&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> longField </span><span style="color:#56B6C2;">+</span></span>
<span class="line"><span style="color:#98C379;">                &quot;, floatField=&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> floatField </span><span style="color:#56B6C2;">+</span></span>
<span class="line"><span style="color:#98C379;">                &quot;, doubleField=&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> doubleField </span><span style="color:#56B6C2;">+</span></span>
<span class="line"><span style="color:#98C379;">                &quot;, staticFiled=&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> staticFiled </span><span style="color:#56B6C2;">+</span></span>
<span class="line"><span style="color:#98C379;">                &#39;}&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> native</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> test</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">FiledMethodTest</span><span style="color:#E06C75;font-style:italic;"> a</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> Exception</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        FiledMethodTest</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> FiledMethodTest</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;start test&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">        test</span><span style="color:#ABB2BF;">(a);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">#include</span><span style="color:#98C379;"> &quot;FiledMethodTest.h&quot;</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#98C379;"> &lt;stdio.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">JNIEXPORT </span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> JNICALL </span><span style="color:#61AFEF;">Java_org_example_me_FiledMethodTest_test</span><span style="color:#ABB2BF;">(JNIEnv </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;"> env, jclass jcl,</span></span>
<span class="line"><span style="color:#ABB2BF;">		jobject obj) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 注意字段和方法描述符中如果是其他的类，必须带上后面的分号</span></span>
<span class="line"><span style="color:#ABB2BF;">	jfieldID listId </span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;"> env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">GetFieldID</span><span style="color:#ABB2BF;">(jcl, </span><span style="color:#98C379;">&quot;list&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;Ljava/util/List;&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	jfieldID boolFieldId </span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;"> env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">GetFieldID</span><span style="color:#ABB2BF;">(jcl, </span><span style="color:#98C379;">&quot;boolField&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;Z&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	jfieldID byteFieldId </span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;"> env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">GetFieldID</span><span style="color:#ABB2BF;">(jcl, </span><span style="color:#98C379;">&quot;byteField&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;B&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	jfieldID charFieldId </span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;"> env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">GetFieldID</span><span style="color:#ABB2BF;">(jcl, </span><span style="color:#98C379;">&quot;charField&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;C&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	jfieldID shortFieldId </span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;"> env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">GetFieldID</span><span style="color:#ABB2BF;">(jcl, </span><span style="color:#98C379;">&quot;shortField&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;S&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	jfieldID intFieldId </span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;"> env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">GetFieldID</span><span style="color:#ABB2BF;">(jcl, </span><span style="color:#98C379;">&quot;intField&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;I&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	jfieldID longFieldId </span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;"> env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">GetFieldID</span><span style="color:#ABB2BF;">(jcl, </span><span style="color:#98C379;">&quot;longField&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;J&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	jfieldID floatFieldId </span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;"> env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">GetFieldID</span><span style="color:#ABB2BF;">(jcl, </span><span style="color:#98C379;">&quot;floatField&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;F&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	jfieldID doubleFieldId </span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;"> env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">GetFieldID</span><span style="color:#ABB2BF;">(jcl, </span><span style="color:#98C379;">&quot;doubleField&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;D&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	jfieldID staticFiledId </span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;"> env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">GetStaticFieldID</span><span style="color:#ABB2BF;">(jcl, </span><span style="color:#98C379;">&quot;staticFiled&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;I&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	jmethodID printListId </span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;"> env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">GetStaticMethodID</span><span style="color:#ABB2BF;">(jcl, </span><span style="color:#98C379;">&quot;printList&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">			&quot;(Ljava/util/List;)V&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	jmethodID printObjId </span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;"> env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">GetMethodID</span><span style="color:#ABB2BF;">(jcl, </span><span style="color:#98C379;">&quot;printObj&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;()V&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	jmethodID getListId </span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;"> env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">GetMethodID</span><span style="color:#ABB2BF;">(jcl, </span><span style="color:#98C379;">&quot;getList&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">			&quot;()Ljava/util/List;&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	jmethodID sayId</span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">GetMethodID</span><span style="color:#ABB2BF;">(jcl,</span><span style="color:#98C379;">&quot;say&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&quot;()V&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	jmethodID addId</span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">GetMethodID</span><span style="color:#ABB2BF;">(jcl,</span><span style="color:#98C379;">&quot;add&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&quot;(II)V&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	jclass arrayListCls </span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;"> env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">FindClass</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;java/util/ArrayList&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	jmethodID list_costruct </span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;"> env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">GetMethodID</span><span style="color:#ABB2BF;">(arrayListCls, </span><span style="color:#98C379;">&quot;&lt;init&gt;&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;()V&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	jmethodID listAddId </span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;"> env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">GetMethodID</span><span style="color:#ABB2BF;">(arrayListCls, </span><span style="color:#98C379;">&quot;add&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">			&quot;(Ljava/lang/Object;)Z&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	jclass arraysCls</span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">FindClass</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;java/util/Arrays&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	jmethodID asListId</span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">GetStaticMethodID</span><span style="color:#ABB2BF;">(arraysCls,</span><span style="color:#98C379;">&quot;asList&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&quot;([Ljava/lang/Object;)Ljava/util/List;&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	jclass intergerCls </span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;"> env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">FindClass</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;java/lang/Integer&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	jmethodID interger_costruct </span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;"> env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">GetMethodID</span><span style="color:#ABB2BF;">(intergerCls, </span><span style="color:#98C379;">&quot;&lt;init&gt;&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">			&quot;(I)V&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 如果找不到方法或者字段不会直接报错，需要手动执行异常检查</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">ExceptionCheck</span><span style="color:#ABB2BF;">()) {</span></span>
<span class="line"><span style="color:#ABB2BF;">		jthrowable err </span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;"> env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">ExceptionOccurred</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">		env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">Throw</span><span style="color:#ABB2BF;">(err);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	jobject listObj </span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;"> env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">GetObjectField</span><span style="color:#ABB2BF;">(obj, listId);</span></span>
<span class="line"><span style="color:#E5C07B;">	env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">CallStaticVoidMethod</span><span style="color:#ABB2BF;">(jcl, printListId, listObj);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	jobject listObj2 </span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;"> env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">CallObjectMethod</span><span style="color:#ABB2BF;">(obj, getListId);</span></span>
<span class="line"><span style="color:#ABB2BF;">	jboolean issame </span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;"> env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">IsSameObject</span><span style="color:#ABB2BF;">(listObj, listObj2);</span></span>
<span class="line"><span style="color:#61AFEF;">	printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;issame-&gt;</span><span style="color:#D19A66;">%d</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">, issame);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	jboolean boolField </span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;"> env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">GetBooleanField</span><span style="color:#ABB2BF;">(obj, boolFieldId);</span></span>
<span class="line"><span style="color:#61AFEF;">	printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;boolField-&gt;</span><span style="color:#D19A66;">%d</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">, boolField);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	jbyte byteField </span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;"> env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">GetByteField</span><span style="color:#ABB2BF;">(obj, byteFieldId);</span></span>
<span class="line"><span style="color:#61AFEF;">	printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;byteField-&gt;</span><span style="color:#D19A66;">%d</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">, byteField);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	jchar charField </span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;"> env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">GetCharField</span><span style="color:#ABB2BF;">(obj, charFieldId);</span></span>
<span class="line"><span style="color:#61AFEF;">	printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;charField-&gt;</span><span style="color:#D19A66;">%d</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">, charField);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	jshort shortField </span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;"> env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">GetShortField</span><span style="color:#ABB2BF;">(obj, shortFieldId);</span></span>
<span class="line"><span style="color:#61AFEF;">	printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;shortField-&gt;</span><span style="color:#D19A66;">%d</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">, shortField);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	jint intField </span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;"> env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">GetIntField</span><span style="color:#ABB2BF;">(obj, intFieldId);</span></span>
<span class="line"><span style="color:#61AFEF;">	printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;intField-&gt;</span><span style="color:#D19A66;">%d</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">, intField);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	jlong longField </span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;"> env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">GetLongField</span><span style="color:#ABB2BF;">(obj, longFieldId);</span></span>
<span class="line"><span style="color:#61AFEF;">	printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;longField-&gt;</span><span style="color:#D19A66;">%d</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">, longField);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	jfloat floatField </span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;"> env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">GetFloatField</span><span style="color:#ABB2BF;">(obj, floatFieldId);</span></span>
<span class="line"><span style="color:#61AFEF;">	printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;floatField-&gt;</span><span style="color:#D19A66;">%f</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">, floatField);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	jdouble doubleField </span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;"> env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">GetDoubleField</span><span style="color:#ABB2BF;">(obj, doubleFieldId);</span></span>
<span class="line"><span style="color:#61AFEF;">	printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;doubleField-&gt;</span><span style="color:#D19A66;">%f</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">, doubleField);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	jint staticFiled </span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;"> env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">GetStaticIntField</span><span style="color:#ABB2BF;">(jcl, staticFiledId);</span></span>
<span class="line"><span style="color:#61AFEF;">	printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;staticFiled-&gt;</span><span style="color:#D19A66;">%d</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">, staticFiled);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// JNI中没有对基本类型的自动装箱拆箱机制，必要时需要手动包装</span></span>
<span class="line"><span style="color:#ABB2BF;">	jobject intObj </span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;"> env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">NewObject</span><span style="color:#ABB2BF;">(intergerCls, interger_costruct, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	jobject intObj2 </span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;"> env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">NewObject</span><span style="color:#ABB2BF;">(intergerCls, interger_costruct, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // jobject newList = env-&gt;NewObject(arrayListCls, list_costruct);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// add方法接受的参数实际是一个对象，因此需要手动包装</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // env-&gt;CallBooleanMethod(newList, listAddId, intObj);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // env-&gt;CallBooleanMethod(newList, listAddId, intObj2);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// Arrays.asList方法在Java中是不可变参数，实际多个参数最终会被转变成数组，因此这里的入参必须是数组</span></span>
<span class="line"><span style="color:#ABB2BF;">	jobjectArray objArray</span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">NewObjectArray</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">,intergerCls,intObj);</span></span>
<span class="line"><span style="color:#E5C07B;">	env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">SetObjectArrayElement</span><span style="color:#ABB2BF;">(objArray,</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,intObj2);</span></span>
<span class="line"><span style="color:#ABB2BF;">	jobject newList</span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">CallStaticObjectMethod</span><span style="color:#ABB2BF;">(arraysCls,asListId,objArray);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">	env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">SetObjectField</span><span style="color:#ABB2BF;">(obj, listId, newList);</span></span>
<span class="line"><span style="color:#E5C07B;">	env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">SetBooleanField</span><span style="color:#ABB2BF;">(obj, boolFieldId, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">	env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">SetByteField</span><span style="color:#ABB2BF;">(obj, byteFieldId, </span><span style="color:#D19A66;">21</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">	env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">SetCharField</span><span style="color:#ABB2BF;">(obj, charFieldId, </span><span style="color:#98C379;">&#39;d&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">	env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">SetShortField</span><span style="color:#ABB2BF;">(obj, shortFieldId, </span><span style="color:#D19A66;">22</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">	env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">SetIntField</span><span style="color:#ABB2BF;">(obj, intFieldId, </span><span style="color:#D19A66;">23</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">	env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">SetLongField</span><span style="color:#ABB2BF;">(obj, longFieldId, </span><span style="color:#D19A66;">24</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">	env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">SetFloatField</span><span style="color:#ABB2BF;">(obj, floatFieldId, </span><span style="color:#D19A66;">25.0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">	env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">SetDoubleField</span><span style="color:#ABB2BF;">(obj, doubleFieldId, </span><span style="color:#D19A66;">26.0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">	env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">SetStaticIntField</span><span style="color:#ABB2BF;">(jcl, staticFiledId, </span><span style="color:#D19A66;">27</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">	env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">CallVoidMethod</span><span style="color:#ABB2BF;">(obj, printObjId);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	jclass superCls</span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">GetSuperclass</span><span style="color:#ABB2BF;">(jcl);</span></span>
<span class="line"><span style="color:#ABB2BF;">	jmethodID superSayId</span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">GetMethodID</span><span style="color:#ABB2BF;">(superCls,</span><span style="color:#98C379;">&quot;say&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&quot;()V&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 如果子类没有覆写则使用父类的实现，否则使用子类覆写的实现</span></span>
<span class="line"><span style="color:#E5C07B;">	env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">CallVoidMethod</span><span style="color:#ABB2BF;">(obj,sayId);</span></span>
<span class="line"><span style="color:#E5C07B;">	env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">CallVoidMethod</span><span style="color:#ABB2BF;">(obj,addId,</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 使用 jclass 的方法实现，可以是子类的也可以是父类的,取决于后面的 methodId</span></span>
<span class="line"><span style="color:#E5C07B;">	env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">CallNonvirtualVoidMethod</span><span style="color:#ABB2BF;">(obj,jcl,sayId);</span></span>
<span class="line"><span style="color:#E5C07B;">	env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">CallNonvirtualVoidMethod</span><span style="color:#ABB2BF;">(obj,jcl,superSayId);</span></span>
<span class="line"><span style="color:#E5C07B;">	env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">CallNonvirtualVoidMethod</span><span style="color:#ABB2BF;">(obj,superCls,sayId);</span></span>
<span class="line"><span style="color:#E5C07B;">	env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">CallNonvirtualVoidMethod</span><span style="color:#ABB2BF;">(obj,superCls,superSayId);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述示例中 printObj 和 printList 方法都是私有方法，但是通过 JNI 接口一样可以正常调用，说明 JNI 无视 Java的访问权限控制，可以访问任何方法和字段。</p><h2 id="字符串-api" tabindex="-1"><a class="header-anchor" href="#字符串-api"><span>字符串 API</span></a></h2><p>Java 内部使用 UTF-16 来表示字符，JNI 允许使用 UTF-16 的字符串构建 java.lang.String 对象，也允许使用 UTF-8 字符串构建 java.lang.String 对象。但是 JNI 使用改良版的 UTF-8 字符串，与标准 UTF-8 主要有两个不同，第一个表示 null 的 char 0 被编译成 2 个字节而非一个字节，这表示改良版的 UTF-8 编码不会有嵌入的 null 字符；第二个，改良版的 UTF-8 只使用 1 个，2 个或者 3个 字节形式的 UTF-8 字符编码，不支持 4 字节形式的，会使用替代的 1 或者 2 或者 3 字节形式的编码。</p><p>相关 API 如下：</p><ul><li>jstring NewString(JNIEnv *env, const jchar *unicodeChars,jsize len); 用 UTF-16 字符数组构建一个 jstringjsize</li><li>GetStringLength(JNIEnv *env, jstring string); 获取 UTF-16 字符串的字符数量</li><li>const jchar * GetStringChars(JNIEnv *env, jstring string,jboolean *isCopy); 获取 UTF-16字 符串的字符数组，如果 isCopy 不是 NULL，则当 JVM 返回的字符数组是复制自字符串时，isCopy 被置为 TRUE，如果是返回指向字符串的一个指针时，则 isCopy 被置为 FALSE</li><li>void ReleaseStringChars(JNIEnv *env, jstring string,const jchar *chars); 通知 JVM 释放 chars 指向的字符数组</li><li>void GetStringRegion(JNIEnv *env, jstring str, jsize start, jsize len, jchar *buf);将 str 中指定范围的字符复制到 buf 中</li><li>const jchar * GetStringCritical(JNIEnv *env, jstring string, jboolean *isCopy);</li><li>void ReleaseStringCritical(JNIEnv *env, jstring string, const jchar *carray); 这两个方法的用途同 GetStringChars 和 ReleaseStringCritical，不同的是这两个方法的使用更严格。这两个方法中间的区域称为关键区，关键区内不能调用其他的 JNI 方法，不能执行类似读取文件这类会阻塞当前线程的操作</li></ul><p>上面的 API 都是针对 UTF-16 字符串，针对通用的 UTF-8 字符串的 API 如下，函数的功能都一样，最大的变化就是从 jchar 换成了 char：</p><ul><li>jstring NewStringUTF(JNIEnv *env, const char *bytes); 使用 UTF-8 编码后的 char 数组构建一个新的 java.lang.String 对象</li><li>jsize GetStringUTFLength(JNIEnv *env, jstring string); 返回一个字符串用 UTF-8 编码后的字符数组的长度，因为 UTF-8 是变长的，所以字符数组的长度不一定等于字符的长度</li><li>const char * GetStringUTFChars(JNIEnv *env, jstring string,jboolean *isCopy); 获取一个字符串用 UTF-8 编码后的字符数组，同 GetStringChars，可以通过 isCopy 判断返回的字符数组是否复制自原数组</li><li>void ReleaseStringUTFChars(JNIEnv *env, jstring string,const char *utf); 通知 JVM 释放 utf 指向的字符数组</li><li>void GetStringUTFRegion(JNIEnv *env, jstring str, jsize start, jsize len, char *buf); 将 str 中指定范围的 UTF-16 字符用 UTF-8 编码后复制到 buf 中</li></ul><p>以下是一个 JNI 字符串测试，dll 生成参考上一节步骤。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">package</span><span style="color:#C678DD;"> org.example.me</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> StringTest</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    static</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">load</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;D:</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">WorkSpace</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">IDEA</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">codexperiment</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">jdk8</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">src</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">main</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">java</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">StringTest.dll&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> native</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> stringTest</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;font-style:italic;"> test</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> printStr</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;font-style:italic;"> test</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;str length:&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> test</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">length</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;str:&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> test);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        String</span><span style="color:#E06C75;"> test</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;Hello World 中文测试&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">        stringTest</span><span style="color:#ABB2BF;">(test);</span></span>
<span class="line"><span style="color:#61AFEF;">        printStr</span><span style="color:#ABB2BF;">(test);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">#include</span><span style="color:#98C379;"> &quot;StringTest.h&quot;</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#98C379;"> &lt;stdio.h&gt;</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#98C379;"> &lt;stdlib.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">typedef</span><span style="color:#C678DD;"> unsigned</span><span style="color:#C678DD;"> char</span><span style="color:#C678DD;"> u_char</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#61AFEF;"> unicode_length</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">const</span><span style="color:#C678DD;"> char*</span><span style="color:#E06C75;font-style:italic;"> str</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#61AFEF;"> convert_to_unicode</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">const</span><span style="color:#C678DD;"> char*</span><span style="color:#E06C75;font-style:italic;"> utf8_str</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">jchar</span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;"> unicode_str</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> unicode_length</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">char*</span><span style="color:#61AFEF;"> next</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">const</span><span style="color:#C678DD;"> char*</span><span style="color:#E06C75;font-style:italic;"> str</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">jchar</span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;"> value</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#61AFEF;"> utf8_length</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> jchar</span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;"> base</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> length</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">u_char*</span><span style="color:#61AFEF;"> utf8_write</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">u_char*</span><span style="color:#E06C75;font-style:italic;"> base</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">jchar</span><span style="color:#E06C75;font-style:italic;"> ch</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">char*</span><span style="color:#61AFEF;"> convert_to_utf8</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> jchar</span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;"> base</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">u_char*</span><span style="color:#E06C75;font-style:italic;"> result</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> length</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">JNIEXPORT </span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> JNICALL Java_org_example_me_StringTest_stringTest</span></span>
<span class="line"><span style="color:#ABB2BF;">  (JNIEnv </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;"> env, jclass jcl, jstring jstr){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	jsize size</span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">GetStringLength</span><span style="color:#ABB2BF;">(jstr);</span></span>
<span class="line"><span style="color:#61AFEF;">	printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;GetStringLength length-&gt;</span><span style="color:#D19A66;">%d</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">,size);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	jsize size2</span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">GetStringUTFLength</span><span style="color:#ABB2BF;">(jstr);</span></span>
<span class="line"><span style="color:#61AFEF;">	printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;GetStringUTFLength length-&gt;</span><span style="color:#D19A66;">%d</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">,size2);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	jboolean isCopy</span><span style="color:#C678DD;">=</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#ABB2BF;"> jchar</span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;"> jcharStr</span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">GetStringChars</span><span style="color:#ABB2BF;">(jstr, </span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">isCopy);</span></span>
<span class="line"><span style="color:#ABB2BF;">    jstring testStr</span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">NewString</span><span style="color:#ABB2BF;">(jcharStr</span><span style="color:#C678DD;">+</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, size</span><span style="color:#C678DD;">-</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#C678DD;"> char*</span><span style="color:#ABB2BF;"> charStr</span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">GetStringUTFChars</span><span style="color:#ABB2BF;">(testStr,</span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">isCopy);</span></span>
<span class="line"><span style="color:#61AFEF;">	printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;GetStringChars str-&gt;</span><span style="color:#D19A66;">%s</span><span style="color:#98C379;">,isCopy-&gt;</span><span style="color:#D19A66;">%d</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">,charStr,isCopy);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    int</span><span style="color:#ABB2BF;"> utf8_len</span><span style="color:#C678DD;">=</span><span style="color:#61AFEF;">utf8_length</span><span style="color:#ABB2BF;">(jcharStr, (</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">)size)</span><span style="color:#C678DD;">+</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    u_char</span><span style="color:#C678DD;"> *</span><span style="color:#ABB2BF;"> utf8Char</span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">u_char*</span><span style="color:#ABB2BF;">)</span><span style="color:#61AFEF;">malloc</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">sizeof</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">u_char</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">utf8_len);</span></span>
<span class="line"><span style="color:#61AFEF;">    convert_to_utf8</span><span style="color:#ABB2BF;">(jcharStr, utf8Char, size);</span></span>
<span class="line"><span style="color:#61AFEF;">    printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;convert_to_utf8 Test str-&gt;</span><span style="color:#D19A66;">%s</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">,utf8Char);</span></span>
<span class="line"><span style="color:#61AFEF;">    free</span><span style="color:#ABB2BF;">(utf8Char);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //ReleaseStringChars底层调用的还是free，因此jcharStr不会变成NULL，只是其指向的内存被标记成释放了，继续访问结果不确定</span></span>
<span class="line"><span style="color:#E5C07B;">	env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">ReleaseStringChars</span><span style="color:#ABB2BF;">(jstr, jcharStr);</span></span>
<span class="line"><span style="color:#61AFEF;">	printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;ReleaseStringChars str-&gt;</span><span style="color:#D19A66;">%d</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">,jcharStr</span><span style="color:#C678DD;">==</span><span style="color:#D19A66;">NULL</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	jstring testStr2</span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">NewStringUTF</span><span style="color:#ABB2BF;">(charStr</span><span style="color:#C678DD;">+</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//释放charStr原来指向的字符串</span></span>
<span class="line"><span style="color:#E5C07B;">	env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">ReleaseStringUTFChars</span><span style="color:#ABB2BF;">(testStr, charStr);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//重新赋值</span></span>
<span class="line"><span style="color:#ABB2BF;">	charStr</span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">GetStringUTFChars</span><span style="color:#ABB2BF;">(testStr2,</span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">isCopy);</span></span>
<span class="line"><span style="color:#61AFEF;">	printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;GetStringUTFChars str-&gt;</span><span style="color:#D19A66;">%s</span><span style="color:#98C379;">,isCopy-&gt;</span><span style="color:#D19A66;">%d</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">,charStr,isCopy);</span></span>
<span class="line"><span style="color:#E5C07B;">	env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">ReleaseStringUTFChars</span><span style="color:#ABB2BF;">(testStr2, charStr);</span></span>
<span class="line"><span style="color:#61AFEF;">	printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;ReleaseStringUTFChars str-&gt;</span><span style="color:#D19A66;">%s</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">,charStr);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	jchar </span><span style="color:#E5C07B;">newJcharStr</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">]</span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;">{};</span></span>
<span class="line"><span style="color:#E5C07B;">	env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">GetStringRegion</span><span style="color:#ABB2BF;">(jstr, </span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">, newJcharStr);</span></span>
<span class="line"><span style="color:#ABB2BF;">	testStr</span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">NewString</span><span style="color:#ABB2BF;">(newJcharStr, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    charStr</span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">GetStringUTFChars</span><span style="color:#ABB2BF;">(testStr,</span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">isCopy);</span></span>
<span class="line"><span style="color:#61AFEF;">	printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;GetStringRegion str-&gt;</span><span style="color:#D19A66;">%s</span><span style="color:#98C379;">,isCopy-&gt;</span><span style="color:#D19A66;">%d</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">,charStr,isCopy);</span></span>
<span class="line"><span style="color:#E5C07B;">	env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">ReleaseStringUTFChars</span><span style="color:#ABB2BF;">(testStr, charStr);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	char</span><span style="color:#E5C07B;"> newCharStr</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">]</span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;">{};</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//注意底层实现不会校验newCharStr的长度是否够，调用方需要确保足够的容量</span></span>
<span class="line"><span style="color:#E5C07B;">	env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">GetStringUTFRegion</span><span style="color:#ABB2BF;">(jstr, </span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">, newCharStr);</span></span>
<span class="line"><span style="color:#61AFEF;">	printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;GetStringUTFRegion str-&gt;</span><span style="color:#D19A66;">%s</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">,newCharStr);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	jmethodID printTestId</span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">GetStaticMethodID</span><span style="color:#ABB2BF;">(jcl, </span><span style="color:#98C379;">&quot;printStr&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;(Ljava/lang/String;)V&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	char*</span><span style="color:#ABB2BF;"> newStr</span><span style="color:#C678DD;">=</span><span style="color:#98C379;">&quot;NewStringTest 中文测试&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//创建新字符串,可执行编码必须是UTF-8,否则打印的是乱码</span></span>
<span class="line"><span style="color:#ABB2BF;">	jstring test</span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">NewStringUTF</span><span style="color:#ABB2BF;">(newStr);</span></span>
<span class="line"><span style="color:#E5C07B;">	env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">CallStaticVoidMethod</span><span style="color:#ABB2BF;">(jcl, printTestId,test);</span></span>
<span class="line"><span style="color:#C678DD;">	int</span><span style="color:#ABB2BF;"> len</span><span style="color:#C678DD;">=</span><span style="color:#61AFEF;">unicode_length</span><span style="color:#ABB2BF;">(newStr);</span></span>
<span class="line"><span style="color:#ABB2BF;">	jchar</span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;"> unicodeChar</span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;">(jchar</span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">)</span><span style="color:#61AFEF;">malloc</span><span style="color:#ABB2BF;">(len</span><span style="color:#C678DD;">*sizeof</span><span style="color:#ABB2BF;">(jchar));</span></span>
<span class="line"><span style="color:#61AFEF;">	convert_to_unicode</span><span style="color:#ABB2BF;">(newStr, unicodeChar, len);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//使用NewString的话需要手动将UTF-8字符串转换成UTF-16字符串</span></span>
<span class="line"><span style="color:#ABB2BF;">	test</span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">NewString</span><span style="color:#ABB2BF;">(unicodeChar,(jsize)len);</span></span>
<span class="line"><span style="color:#61AFEF;">	printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;convert_to_unicode test</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">	env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">CallStaticVoidMethod</span><span style="color:#ABB2BF;">(jcl, printTestId,test);</span></span>
<span class="line"><span style="color:#61AFEF;">	free</span><span style="color:#ABB2BF;">(unicodeChar);</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">ExceptionCheck</span><span style="color:#ABB2BF;">()){</span></span>
<span class="line"><span style="color:#E5C07B;">		env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">ExceptionDescribe</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#61AFEF;"> unicode_length</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">const</span><span style="color:#C678DD;"> char*</span><span style="color:#E06C75;font-style:italic;"> str</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  int</span><span style="color:#ABB2BF;"> num_chars </span><span style="color:#C678DD;">=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">  for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">const</span><span style="color:#C678DD;"> char*</span><span style="color:#ABB2BF;"> p </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> str; </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">p; p</span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (((</span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">p) </span><span style="color:#56B6C2;">&amp;</span><span style="color:#E06C75;"> 0x</span><span style="color:#D19A66;">C0</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">!=</span><span style="color:#E06C75;"> 0x</span><span style="color:#D19A66;">80</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      num_chars</span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#ABB2BF;"> num_chars;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#61AFEF;"> convert_to_unicode</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">const</span><span style="color:#C678DD;"> char*</span><span style="color:#E06C75;font-style:italic;"> utf8_str</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">jchar</span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;"> unicode_str</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> unicode_length</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  unsigned</span><span style="color:#C678DD;"> char</span><span style="color:#ABB2BF;"> ch;</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#C678DD;"> char</span><span style="color:#C678DD;"> *</span><span style="color:#ABB2BF;">ptr </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> utf8_str;</span></span>
<span class="line"><span style="color:#C678DD;">  int</span><span style="color:#ABB2BF;"> index </span><span style="color:#C678DD;">=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  /* ASCII case loop optimization */</span></span>
<span class="line"><span style="color:#C678DD;">  for</span><span style="color:#ABB2BF;"> (; index </span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;"> unicode_length; index</span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;">((ch </span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;"> ptr</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">]) </span><span style="color:#C678DD;">&gt;</span><span style="color:#E06C75;"> 0x</span><span style="color:#D19A66;">7F</span><span style="color:#ABB2BF;">) { </span><span style="color:#C678DD;">break</span><span style="color:#ABB2BF;">; }</span></span>
<span class="line"><span style="color:#E5C07B;">    unicode_str</span><span style="color:#ABB2BF;">[index] </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> ch;</span></span>
<span class="line"><span style="color:#ABB2BF;">    ptr </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">const</span><span style="color:#C678DD;"> char</span><span style="color:#C678DD;"> *</span><span style="color:#ABB2BF;">)(ptr </span><span style="color:#C678DD;">+</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  for</span><span style="color:#ABB2BF;"> (; index </span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;"> unicode_length; index</span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    ptr </span><span style="color:#C678DD;">=</span><span style="color:#61AFEF;"> next</span><span style="color:#ABB2BF;">(ptr, </span><span style="color:#56B6C2;">&amp;</span><span style="color:#E5C07B;">unicode_str</span><span style="color:#ABB2BF;">[index]);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">char*</span><span style="color:#61AFEF;"> next</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">const</span><span style="color:#C678DD;"> char*</span><span style="color:#E06C75;font-style:italic;"> str</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">jchar</span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;"> value</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  unsigned</span><span style="color:#C678DD;"> const</span><span style="color:#C678DD;"> char</span><span style="color:#C678DD;"> *</span><span style="color:#ABB2BF;">ptr </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">const</span><span style="color:#C678DD;"> unsigned</span><span style="color:#C678DD;"> char</span><span style="color:#C678DD;"> *</span><span style="color:#ABB2BF;">)str;</span></span>
<span class="line"><span style="color:#C678DD;">  unsigned</span><span style="color:#C678DD;"> char</span><span style="color:#ABB2BF;"> ch, ch2, ch3;</span></span>
<span class="line"><span style="color:#C678DD;">  int</span><span style="color:#ABB2BF;"> length </span><span style="color:#C678DD;">=</span><span style="color:#C678DD;"> -</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">              /* bad length */</span></span>
<span class="line"><span style="color:#ABB2BF;">  jchar result;</span></span>
<span class="line"><span style="color:#C678DD;">  switch</span><span style="color:#ABB2BF;"> ((ch </span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;"> ptr</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">]) </span><span style="color:#C678DD;">&gt;&gt;</span><span style="color:#D19A66;"> 4</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    default</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">    result </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> ch;</span></span>
<span class="line"><span style="color:#ABB2BF;">    length </span><span style="color:#C678DD;">=</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  case</span><span style="color:#E06C75;"> 0x</span><span style="color:#D19A66;">8</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">case</span><span style="color:#E06C75;"> 0x</span><span style="color:#D19A66;">9</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">case</span><span style="color:#E06C75;"> 0x</span><span style="color:#D19A66;">A</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">case</span><span style="color:#E06C75;"> 0x</span><span style="color:#D19A66;">B</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">case</span><span style="color:#E06C75;"> 0x</span><span style="color:#D19A66;">F</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /* Shouldn&#39;t happen. */</span></span>
<span class="line"><span style="color:#C678DD;">    break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  case</span><span style="color:#E06C75;"> 0x</span><span style="color:#D19A66;">C</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">case</span><span style="color:#E06C75;"> 0x</span><span style="color:#D19A66;">D</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /* 110xxxxx  10xxxxxx */</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (((ch2 </span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;"> ptr</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">]) </span><span style="color:#56B6C2;">&amp;</span><span style="color:#E06C75;"> 0x</span><span style="color:#D19A66;">C0</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">==</span><span style="color:#E06C75;"> 0x</span><span style="color:#D19A66;">80</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">      unsigned</span><span style="color:#C678DD;"> char</span><span style="color:#ABB2BF;"> high_five </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> ch </span><span style="color:#56B6C2;">&amp;</span><span style="color:#E06C75;"> 0x</span><span style="color:#D19A66;">1F</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">      unsigned</span><span style="color:#C678DD;"> char</span><span style="color:#ABB2BF;"> low_six </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> ch2 </span><span style="color:#56B6C2;">&amp;</span><span style="color:#E06C75;"> 0x</span><span style="color:#D19A66;">3F</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">      result </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> (high_five </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#D19A66;"> 6</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">+</span><span style="color:#ABB2BF;"> low_six;</span></span>
<span class="line"><span style="color:#ABB2BF;">      length </span><span style="color:#C678DD;">=</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">      break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  case</span><span style="color:#E06C75;"> 0x</span><span style="color:#D19A66;">E</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /* 1110xxxx 10xxxxxx 10xxxxxx */</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (((ch2 </span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;"> ptr</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">]) </span><span style="color:#56B6C2;">&amp;</span><span style="color:#E06C75;"> 0x</span><span style="color:#D19A66;">C0</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">==</span><span style="color:#E06C75;"> 0x</span><span style="color:#D19A66;">80</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">      if</span><span style="color:#ABB2BF;"> (((ch3 </span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;"> ptr</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">]) </span><span style="color:#56B6C2;">&amp;</span><span style="color:#E06C75;"> 0x</span><span style="color:#D19A66;">C0</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">==</span><span style="color:#E06C75;"> 0x</span><span style="color:#D19A66;">80</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">        unsigned</span><span style="color:#C678DD;"> char</span><span style="color:#ABB2BF;"> high_four </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> ch </span><span style="color:#56B6C2;">&amp;</span><span style="color:#E06C75;"> 0x</span><span style="color:#D19A66;">0f</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        unsigned</span><span style="color:#C678DD;"> char</span><span style="color:#ABB2BF;"> mid_six </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> ch2 </span><span style="color:#56B6C2;">&amp;</span><span style="color:#E06C75;"> 0x</span><span style="color:#D19A66;">3f</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        unsigned</span><span style="color:#C678DD;"> char</span><span style="color:#ABB2BF;"> low_six </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> ch3 </span><span style="color:#56B6C2;">&amp;</span><span style="color:#E06C75;"> 0x</span><span style="color:#D19A66;">3f</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        result </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> (((high_four </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#D19A66;"> 6</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">+</span><span style="color:#ABB2BF;"> mid_six) </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#D19A66;"> 6</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">+</span><span style="color:#ABB2BF;"> low_six;</span></span>
<span class="line"><span style="color:#ABB2BF;">        length </span><span style="color:#C678DD;">=</span><span style="color:#D19A66;"> 3</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span><span style="color:#7F848E;font-style:italic;"> /* end of switch */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#ABB2BF;"> (length </span><span style="color:#C678DD;">&lt;=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    *</span><span style="color:#ABB2BF;">value </span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;"> ptr</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">];</span><span style="color:#7F848E;font-style:italic;">    /* default bad result; */</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">char*</span><span style="color:#ABB2BF;">)(ptr </span><span style="color:#C678DD;">+</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;"> // make progress somehow</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  *</span><span style="color:#ABB2BF;">value </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> result;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // The assert is correct but the .class file is wrong</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // assert(UNICODE::utf8_size(result) == length, &quot;checking reverse computation&quot;);</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">char</span><span style="color:#C678DD;"> *</span><span style="color:#ABB2BF;">)(ptr </span><span style="color:#C678DD;">+</span><span style="color:#ABB2BF;"> length);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#61AFEF;"> utf8_length</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> jchar</span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;"> base</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> length</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  int</span><span style="color:#ABB2BF;"> result </span><span style="color:#C678DD;">=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">  for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> index </span><span style="color:#C678DD;">=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; index </span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;"> length; index</span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    jchar c </span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;"> base</span><span style="color:#ABB2BF;">[index];</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> ((</span><span style="color:#E06C75;">0x</span><span style="color:#D19A66;">0001</span><span style="color:#C678DD;"> &lt;=</span><span style="color:#ABB2BF;"> c) </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#ABB2BF;"> (c </span><span style="color:#C678DD;">&lt;=</span><span style="color:#E06C75;"> 0x</span><span style="color:#D19A66;">007F</span><span style="color:#ABB2BF;">)) result </span><span style="color:#C678DD;">+=</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (c </span><span style="color:#C678DD;">&lt;=</span><span style="color:#E06C75;"> 0x</span><span style="color:#D19A66;">07FF</span><span style="color:#ABB2BF;">) result </span><span style="color:#C678DD;">+=</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    else</span><span style="color:#ABB2BF;"> result </span><span style="color:#C678DD;">+=</span><span style="color:#D19A66;"> 3</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#ABB2BF;"> result;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">u_char*</span><span style="color:#61AFEF;"> utf8_write</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">u_char*</span><span style="color:#E06C75;font-style:italic;"> base</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">jchar</span><span style="color:#E06C75;font-style:italic;"> ch</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#ABB2BF;"> ((ch </span><span style="color:#C678DD;">!=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#ABB2BF;"> (ch </span><span style="color:#C678DD;">&lt;=</span><span style="color:#E06C75;">0x</span><span style="color:#D19A66;">7f</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#E5C07B;">    base</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">u_char</span><span style="color:#ABB2BF;">) ch;</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#ABB2BF;"> base </span><span style="color:#C678DD;">+</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#ABB2BF;"> (ch </span><span style="color:#C678DD;">&lt;=</span><span style="color:#E06C75;"> 0x</span><span style="color:#D19A66;">7FF</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /* 11 bits or less. */</span></span>
<span class="line"><span style="color:#C678DD;">    unsigned</span><span style="color:#C678DD;"> char</span><span style="color:#ABB2BF;"> high_five </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> ch </span><span style="color:#C678DD;">&gt;&gt;</span><span style="color:#D19A66;"> 6</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    unsigned</span><span style="color:#C678DD;"> char</span><span style="color:#ABB2BF;"> low_six </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> ch </span><span style="color:#56B6C2;">&amp;</span><span style="color:#E06C75;"> 0x</span><span style="color:#D19A66;">3F</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">    base</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> high_five </span><span style="color:#56B6C2;">|</span><span style="color:#E06C75;"> 0x</span><span style="color:#D19A66;">C0</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;"> /* 110xxxxx */</span></span>
<span class="line"><span style="color:#E5C07B;">    base</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> low_six </span><span style="color:#56B6C2;">|</span><span style="color:#E06C75;"> 0x</span><span style="color:#D19A66;">80</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">   /* 10xxxxxx */</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#ABB2BF;"> base </span><span style="color:#C678DD;">+</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  /* possibly full 16 bits. */</span></span>
<span class="line"><span style="color:#C678DD;">  char</span><span style="color:#ABB2BF;"> high_four </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> ch </span><span style="color:#C678DD;">&gt;&gt;</span><span style="color:#D19A66;"> 12</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">  char</span><span style="color:#ABB2BF;"> mid_six </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> (ch </span><span style="color:#C678DD;">&gt;&gt;</span><span style="color:#D19A66;"> 6</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">&amp;</span><span style="color:#E06C75;"> 0x</span><span style="color:#D19A66;">3F</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">  char</span><span style="color:#ABB2BF;"> low_six </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> ch </span><span style="color:#56B6C2;">&amp;</span><span style="color:#E06C75;"> 0x</span><span style="color:#D19A66;">3f</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">  base</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> high_four </span><span style="color:#56B6C2;">|</span><span style="color:#E06C75;"> 0x</span><span style="color:#D19A66;">E0</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;"> /* 1110xxxx */</span></span>
<span class="line"><span style="color:#E5C07B;">  base</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> mid_six </span><span style="color:#56B6C2;">|</span><span style="color:#E06C75;"> 0x</span><span style="color:#D19A66;">80</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">   /* 10xxxxxx */</span></span>
<span class="line"><span style="color:#E5C07B;">  base</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> low_six </span><span style="color:#56B6C2;">|</span><span style="color:#E06C75;"> 0x</span><span style="color:#D19A66;">80</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">   /* 10xxxxxx */</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#ABB2BF;"> base </span><span style="color:#C678DD;">+</span><span style="color:#D19A66;"> 3</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">char*</span><span style="color:#61AFEF;"> convert_to_utf8</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> jchar</span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;"> base</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">u_char*</span><span style="color:#E06C75;font-style:italic;"> result</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> length</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  u_char*</span><span style="color:#ABB2BF;"> p </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> result;</span></span>
<span class="line"><span style="color:#C678DD;">  for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> index </span><span style="color:#C678DD;">=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; index </span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;"> length; index</span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    p </span><span style="color:#C678DD;">=</span><span style="color:#61AFEF;"> utf8_write</span><span style="color:#ABB2BF;">(p, </span><span style="color:#E5C07B;">base</span><span style="color:#ABB2BF;">[index]);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#C678DD;">  *</span><span style="color:#ABB2BF;">p </span><span style="color:#C678DD;">=</span><span style="color:#98C379;"> &#39;</span><span style="color:#56B6C2;">\\0</span><span style="color:#98C379;">&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">char*</span><span style="color:#ABB2BF;">) result;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述示例中 UTF-16 编码和 UTF-8 编码之间的转换的代码参考<code>hotspot/src/share/vm/utilities/utf8.cpp</code></p><h2 id="数组操作-api" tabindex="-1"><a class="header-anchor" href="#数组操作-api"><span>数组操作 API</span></a></h2><p>数组 API 说明如下：</p><ul><li>jsize GetArrayLength(JNIEnv *env, jarray array); 获取字符串长度，适用于所有元素类型的数组</li><li>jobjectArray NewObjectArray(JNIEnv *env, jsize length,jclass elementClass, jobject initialElement); 创建一个指定长度 length 和指定类型 elementClass 的数组，initialElement 为该数组的 0 号元素</li><li>jobject GetObjectArrayElement(JNIEnv *env,jobjectArray array, jsize index); 获取指定索引 index 处的数组元素</li><li>void SetObjectArrayElement(JNIEnv *env, jobjectArray array,jsize index, jobject value); 将数组的指定索引 index 的元素设置为指定对象 value</li></ul><p>注意上述 API 除 GetArrayLength 外都是针对对象数组，对 int 等基本类型的数组的 API 如下：</p><ul><li>ArrayType New&lt;PrimitiveType&gt;Array(JNIEnv *env, jsize length); 创建一个指定长度 length 的基本类型数组，ArrayType 与 PrimitiveType 的对应关系如下：</li></ul><table><thead><tr><th>New&lt;PrimitiveType&gt;Array Routine</th><th>Array type</th></tr></thead><tbody><tr><td>NewBooleanArray()</td><td>jbooleanArray</td></tr><tr><td>NewByteArray()</td><td>jbyteArray</td></tr><tr><td>NewCharArray()</td><td>jcharArray</td></tr><tr><td>NewShortArray()</td><td>jhortArray</td></tr><tr><td>NewIntArray()</td><td>jntArray</td></tr><tr><td>NewLongArray()</td><td>jlongArray</td></tr><tr><td>NewFloatArray()</td><td>jfloatArray</td></tr><tr><td>NewDoubleArray()</td><td>jdoubleArray</td></tr></tbody></table><ul><li>NativeType *Get&lt;PrimitiveType&gt;ArrayElements(JNIEnv *env,ArrayType array, jboolean *isCopy); 获取基本类型数组的元素数组，isCopy 表示返回的元素数组是否复制自原数组，如果是复制自原数组则 isCopy 被设置成 1，否则设置成 false。返回的数组指针一直是有效的，直到调用了Release&lt;PrimitiveType&gt;ArrayElements() 方法。对返回的数组元素的修改不会同步到原数组，除非调用了 Releas&lt;PrimitiveType&gt;ArrayElements 方法。NativeType，PrimitiveType 和 ArrayType 三者的对应关系如下：</li></ul><table><thead><tr><th>New&lt;PrimitiveType&gt;Array Routine</th><th>Array type</th><th>Native type</th></tr></thead><tbody><tr><td>GetBooleanArrayElements()</td><td>jbooleanArray</td><td>jboolean</td></tr><tr><td>GetByteArrayElements()</td><td>jbyteArray</td><td>jbyte</td></tr><tr><td>GetCharArrayElements()</td><td>jcharArray</td><td>jchar</td></tr><tr><td>GetShortArrayElements()</td><td>jshortArray</td><td>jshort</td></tr><tr><td>GetIntArrayElements()</td><td>jntArray</td><td>jnt</td></tr><tr><td>GetLongArrayElements()</td><td>jlongArray</td><td>jlong</td></tr><tr><td>GetFloatArrayElements()</td><td>jfloatArray</td><td>jfloat</td></tr><tr><td>GetDoubleArrayElements()</td><td>jdoubleArray</td><td>jdouble</td></tr></tbody></table><ul><li>void Release&lt;PrimitiveType&gt;ArrayElements(JNIEnv *env,ArrayType array, NativeType *elems, jint mode); 通知 JVM 本地代码不在需要 elems 指向的数组，如果 elems 不是原数组 array 的一份复制则后面的 mode 参数无效。mode 有三个取值，通常传递 0，这时程序会将 elems 指向的数组元素写回到原数组 array，即对 elems 的修改会同步到原数组 array，然后释放掉 elems 占用的内存。mode 另外两个选项分别是 JNI_COMMIT 和 JNI_ABORT，JNI_COMMIT 也会将 elems 写回到 array 中，但是不会释放 elems 占用的内存，JNI_ABORT 与之相反，会释放 elems 占用的内存，但是不会将 elems 写回到 array 中。NativeType，PrimitiveType 和 ArrayType 三者的对应关系同上。</li><li>void Get&lt;PrimitiveType&gt;ArrayRegion(JNIEnv *env, ArrayType array,jsize start, jsize len, NativeType *buf); 将基本类型数组的一部分元素拷贝到对应的 JNI 元素类型数组中。NativeType，PrimitiveType 和ArrayType 三者的对应关系如下：</li></ul><table><thead><tr><th>Get&lt;PrimitiveType&gt;ArrayRegion Routine</th><th>Array type</th><th>Native type</th></tr></thead><tbody><tr><td>GetBooleanArrayRegion()</td><td>jbooleanArray</td><td>jboolean</td></tr><tr><td>GetByteArrayRegion()</td><td>jbyteArray</td><td>jbyte</td></tr><tr><td>GetCharArrayRegion()</td><td>jcharArray</td><td>jchar</td></tr><tr><td>GetShortArrayRegion()</td><td>jshortArray</td><td>jshort</td></tr><tr><td>GetIntArrayRegion()</td><td>jntArray</td><td>jnt</td></tr><tr><td>GetLongArrayRegion()</td><td>jlongArray</td><td>jlong</td></tr><tr><td>GetFloatArrayRegion()</td><td>jfloatArray</td><td>jfloat</td></tr><tr><td>GetDoubleArrayRegion()</td><td>jdoubleArray</td><td>jdouble</td></tr></tbody></table><ul><li>void Set&lt;PrimitiveType&gt;ArrayRegion(JNIEnv *env, ArrayType array,jsize start, jsize len, const NativeType *buf); 将与基本类型元素数组对应的 JNI 元素类型数组的值写回到基本类型元素数组中。 NativeType，PrimitiveType 和 ArrayType 三者的对应关系同上。</li><li>void * GetPrimitiveArrayCritical(JNIEnv *env, jarray array, jboolean *isCopy);</li><li>void ReleasePrimitiveArrayCritical(JNIEnv *env, jarray array, void *carray, jint mode); 这两个函数的功能和 Get/Release&lt;primitivetype&gt;ArrayElements 基本一样，不过跟字符串操作 Get/ReleaseStringCritical 一样，这两个函数必须配合使用，这两个函数构成一个关键区，在关键区内的代码不能调用其他的 JNI 函数，也不能执行任何可能导致当前线程阻塞的操作，如读取文件等。</li></ul><p>以下是一个 JNI 数组测试，dll 生成参考上一节步骤。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">package</span><span style="color:#C678DD;"> org.example.me</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> ArrayTest</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    static</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">load</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;D:</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">WorkSpace</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">IDEA</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">codexperiment</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">jdk8</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">src</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">main</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">java</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">ArrayTest.dll&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> native</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> primArrayTest</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> native</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> objArrayTest</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">        primArrayTest</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#C678DD;"> int</span><span style="color:#ABB2BF;">[]{</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">7</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">8</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">9</span><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;================================&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">        objArrayTest</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#E5C07B;"> String</span><span style="color:#ABB2BF;">[]{</span><span style="color:#98C379;">&quot;a&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;b&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;c&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;d&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;e&quot;</span><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">#include</span><span style="color:#98C379;"> &quot;ArrayTest.h&quot;</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#98C379;"> &lt;stdio.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">JNIEXPORT </span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> JNICALL Java_org_example_me_ArrayTest_primArrayTest</span></span>
<span class="line"><span style="color:#ABB2BF;">  (JNIEnv </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;"> env, jclass jcl, jintArray intArray){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	jboolean iscopy</span><span style="color:#C678DD;">=</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    jsize len</span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">GetArrayLength</span><span style="color:#ABB2BF;">(intArray);</span></span>
<span class="line"><span style="color:#61AFEF;">    printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;GetArrayLength len-&gt;</span><span style="color:#D19A66;">%d</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">,len);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    jint </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;"> intptr</span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">GetIntArrayElements</span><span style="color:#ABB2BF;">(intArray,</span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">iscopy);</span></span>
<span class="line"><span style="color:#61AFEF;">    printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;GetIntArrayElements int[2]-&gt;</span><span style="color:#D19A66;">%d</span><span style="color:#98C379;">,iscopy-&gt;</span><span style="color:#D19A66;">%d</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;">intptr</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">],iscopy);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">    intptr</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">]</span><span style="color:#C678DD;">=</span><span style="color:#D19A66;">22</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    jclass arraysCls</span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">FindClass</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;java/util/Arrays&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    jmethodID convertIntArraysId</span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">GetStaticMethodID</span><span style="color:#ABB2BF;">(arraysCls,</span><span style="color:#98C379;">&quot;toString&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&quot;([I)Ljava/lang/String;&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    jstring result</span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;">(jstring)</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">CallStaticObjectMethod</span><span style="color:#ABB2BF;">(arraysCls,convertIntArraysId,intArray);</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#C678DD;"> char*</span><span style="color:#ABB2BF;"> resultStr</span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">GetStringUTFChars</span><span style="color:#ABB2BF;">(result,</span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">iscopy);</span></span>
<span class="line"><span style="color:#61AFEF;">    printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;no release modify result-&gt;</span><span style="color:#D19A66;">%s</span><span style="color:#98C379;">,iscopy-&gt;</span><span style="color:#D19A66;">%d</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">,resultStr,iscopy);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //释放完后intptr对应的复制数组被释放了，但是依然可以通过intptr访问</span></span>
<span class="line"><span style="color:#E5C07B;">    env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">ReleaseIntArrayElements</span><span style="color:#ABB2BF;">(intArray,intptr,</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">    printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;ReleaseIntArrayElements int[2]-&gt;</span><span style="color:#D19A66;">%d</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;">intptr</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    result</span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;">(jstring)</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">CallStaticObjectMethod</span><span style="color:#ABB2BF;">(arraysCls,convertIntArraysId,intArray);</span></span>
<span class="line"><span style="color:#ABB2BF;">    resultStr</span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">GetStringUTFChars</span><span style="color:#ABB2BF;">(result,</span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">iscopy);</span></span>
<span class="line"><span style="color:#61AFEF;">    printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;ReleaseIntArrayElements modify result-&gt;</span><span style="color:#D19A66;">%s</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">,resultStr);</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    jint </span><span style="color:#E5C07B;">intArrayTest</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">]</span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;">{};</span></span>
<span class="line"><span style="color:#E5C07B;">    env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">GetIntArrayRegion</span><span style="color:#ABB2BF;">(intArray,</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">,intArrayTest);</span></span>
<span class="line"><span style="color:#ABB2BF;">    jintArray jintArrayTest</span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">NewIntArray</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">    env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">SetIntArrayRegion</span><span style="color:#ABB2BF;">(jintArrayTest,</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">,intArrayTest);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    result</span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;">(jstring)</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">CallStaticObjectMethod</span><span style="color:#ABB2BF;">(arraysCls,convertIntArraysId,jintArrayTest);</span></span>
<span class="line"><span style="color:#ABB2BF;">    resultStr</span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">GetStringUTFChars</span><span style="color:#ABB2BF;">(result,</span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">iscopy);</span></span>
<span class="line"><span style="color:#61AFEF;">    printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;SetIntArrayRegion result-&gt;</span><span style="color:#D19A66;">%s</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">,resultStr);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">JNIEXPORT </span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> JNICALL Java_org_example_me_ArrayTest_objArrayTest</span></span>
<span class="line"><span style="color:#ABB2BF;">  (JNIEnv </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;"> env, jclass jcl, jobjectArray objArray){</span></span>
<span class="line"><span style="color:#ABB2BF;">	 jboolean iscopy</span><span style="color:#C678DD;">=</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	 jsize len</span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">GetArrayLength</span><span style="color:#ABB2BF;">(objArray);</span></span>
<span class="line"><span style="color:#61AFEF;">	 printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;GetArrayLength len-&gt;</span><span style="color:#D19A66;">%d</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">,len);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	 jobject obj</span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">GetObjectArrayElement</span><span style="color:#ABB2BF;">(objArray,</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	 jclass stringCls</span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">FindClass</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;java/lang/String&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	 jboolean result</span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">IsInstanceOf</span><span style="color:#ABB2BF;">(obj,stringCls);</span></span>
<span class="line"><span style="color:#61AFEF;">	 printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;IsInstanceOf result-&gt;</span><span style="color:#D19A66;">%d</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">,result);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	 if</span><span style="color:#ABB2BF;">(result){</span></span>
<span class="line"><span style="color:#ABB2BF;">		 jstring str</span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;">(jstring)obj;</span></span>
<span class="line"><span style="color:#C678DD;">		 const</span><span style="color:#C678DD;"> char*</span><span style="color:#ABB2BF;"> charStr</span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">GetStringUTFChars</span><span style="color:#ABB2BF;">(str,</span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">iscopy);</span></span>
<span class="line"><span style="color:#61AFEF;">		 printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;str[0] result-&gt;</span><span style="color:#D19A66;">%s</span><span style="color:#98C379;">,iscopy-&gt;</span><span style="color:#D19A66;">%d</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">,charStr,iscopy);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">		 jstring s</span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">NewStringUTF</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;test&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		 jstring s2</span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">NewStringUTF</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;test2&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">		 env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">SetObjectArrayElement</span><span style="color:#ABB2BF;">(objArray,</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">,s);</span></span>
<span class="line"><span style="color:#E5C07B;">		 env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">SetObjectArrayElement</span><span style="color:#ABB2BF;">(objArray,</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">,s2);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">		 jclass arraysCls</span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">FindClass</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;java/util/Arrays&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		 jmethodID convertIntArraysId</span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">GetStaticMethodID</span><span style="color:#ABB2BF;">(arraysCls,</span><span style="color:#98C379;">&quot;toString&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&quot;([Ljava/lang/Object;)Ljava/lang/String;&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		 jstring result</span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;">(jstring)</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">CallStaticObjectMethod</span><span style="color:#ABB2BF;">(arraysCls,convertIntArraysId,objArray);</span></span>
<span class="line"><span style="color:#C678DD;">		 const</span><span style="color:#C678DD;"> char*</span><span style="color:#ABB2BF;"> resultStr</span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">GetStringUTFChars</span><span style="color:#ABB2BF;">(result,</span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">iscopy);</span></span>
<span class="line"><span style="color:#61AFEF;">		 printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;modify result-&gt;</span><span style="color:#D19A66;">%s</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">,resultStr);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">		 jobjectArray newObjArray</span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">NewObjectArray</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">,stringCls,s);</span></span>
<span class="line"><span style="color:#E5C07B;">		 env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">SetObjectArrayElement</span><span style="color:#ABB2BF;">(newObjArray,</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,s2);</span></span>
<span class="line"><span style="color:#ABB2BF;">		 result</span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;">(jstring)</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">CallStaticObjectMethod</span><span style="color:#ABB2BF;">(arraysCls,convertIntArraysId,newObjArray);</span></span>
<span class="line"><span style="color:#ABB2BF;">		 resultStr</span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">GetStringUTFChars</span><span style="color:#ABB2BF;">(result,</span><span style="color:#56B6C2;">&amp;</span><span style="color:#ABB2BF;">iscopy);</span></span>
<span class="line"><span style="color:#61AFEF;">		 printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;newObjArray result-&gt;</span><span style="color:#D19A66;">%s</span><span style="color:#98C379;">,iscopy-&gt;</span><span style="color:#D19A66;">%d</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">,resultStr,iscopy);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	 }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="monitor-操作-api" tabindex="-1"><a class="header-anchor" href="#monitor-操作-api"><span>Monitor 操作 API</span></a></h2><p>Monitor 相关 API 如下：</p><ul><li>jint MonitorEnter(JNIEnv *env, jobject obj); 获取一个对象监视锁，obj 不能为空，返回 0 表示获取成功，返回负数表示获取失败。如果 obj 的对象监视锁已经被占用，则当前线程会一直等待直到锁被释放并抢占成功。获取成功后可以重复获取，对象监视锁会维护一个成功获取次数，每次成功获取都会增加该次数，调用 MonitorExit 会减少该次数，当次数变成 0 会释放该对象监视锁。注意通过 MonitorEnter 获取的对象监视锁不能通过 monitorexit 指令（该指令对应 synchronized 关键字）释放，只能通过 MonitorExit 或者 DetachCurrentThread 释放。</li><li>jint MonitorExit(JNIEnv *env, jobject obj); 减少当前线程成功获取对象监视锁的次数，当次数变成 0 时，释放当前线程占用的对象监视锁。注意不能使用 MonitorExit 释放通过 synchronized 关键字或者monitorenter 虚拟机指令获取的对象监视锁。</li></ul><p>以下是一个 JNI Monitor 测试，dll 生成参考上一节步骤。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">package</span><span style="color:#C678DD;"> org.example.me</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> java.util.concurrent.CountDownLatch</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> java.util.concurrent.CyclicBarrier</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> MonitorTest</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    static</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">load</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;D:</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">WorkSpace</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">IDEA</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">codexperiment</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">jdk8</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">src</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">main</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">java</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">MonitorTest.dll&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> native</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> monitorTest</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Object</span><span style="color:#E06C75;font-style:italic;"> test</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> Exception</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        CyclicBarrier</span><span style="color:#E06C75;"> cyclicBarrier</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> CyclicBarrier</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">        CountDownLatch</span><span style="color:#E06C75;"> countDownLatch</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> CountDownLatch</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">        Object</span><span style="color:#E06C75;"> monitor</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Object</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;begin test&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">        for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; i </span><span style="color:#56B6C2;">&lt;</span><span style="color:#D19A66;"> 5</span><span style="color:#ABB2BF;">; i++) {</span></span>
<span class="line"><span style="color:#E5C07B;">            MonitorTest</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Worker</span><span style="color:#E06C75;"> worker</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Worker</span><span style="color:#ABB2BF;">(monitor, cyclicBarrier, countDownLatch);</span></span>
<span class="line"><span style="color:#E5C07B;">            worker</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#E5C07B;">        countDownLatch</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">await</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;end test&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    static</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Worker</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Thread</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">        private</span><span style="color:#E5C07B;"> Object</span><span style="color:#E06C75;"> monitor</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">        private</span><span style="color:#E5C07B;"> CyclicBarrier</span><span style="color:#E06C75;"> cyclicBarrier</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">        private</span><span style="color:#E5C07B;"> CountDownLatch</span><span style="color:#E06C75;"> countDownLatch</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">        public</span><span style="color:#61AFEF;"> Worker</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Object</span><span style="color:#E06C75;font-style:italic;"> monitor</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">CyclicBarrier</span><span style="color:#E06C75;font-style:italic;"> cyclicBarrier</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">CountDownLatch</span><span style="color:#E06C75;font-style:italic;"> countDownLatch</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">monitor</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> monitor;</span></span>
<span class="line"><span style="color:#E5C07B;">            this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">cyclicBarrier</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> cyclicBarrier;</span></span>
<span class="line"><span style="color:#E5C07B;">            this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">countDownLatch</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> countDownLatch;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">        public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> run</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            super</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">run</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">            try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">                System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;等待执行，thread ID-&gt;&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">currentThread</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">getName</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#E5C07B;">                cyclicBarrier</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">await</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">                System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;开始执行，thread ID-&gt;&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">currentThread</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">getName</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#61AFEF;">                monitorTest</span><span style="color:#ABB2BF;">(monitor);</span></span>
<span class="line"><span style="color:#E5C07B;">                System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;执行完成，thread ID-&gt;&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">currentThread</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">getName</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#ABB2BF;">            } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">Exception</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">                e</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">printStackTrace</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">            } </span><span style="color:#C678DD;">finally</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">                countDownLatch</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">countDown</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">#include</span><span style="color:#98C379;"> &quot;MonitorTest.h&quot;</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#98C379;"> &lt;stdio.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">JNIEXPORT </span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> JNICALL </span><span style="color:#61AFEF;">Java_org_example_me_MonitorTest_monitorTest</span><span style="color:#ABB2BF;">(JNIEnv </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;"> env,</span></span>
<span class="line"><span style="color:#ABB2BF;">		jclass jcl, jobject obj) {</span></span>
<span class="line"><span style="color:#ABB2BF;">	jclass threadJcl </span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;"> env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">FindClass</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;java/lang/Thread&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	jmethodID currentThreadId </span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;"> env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">GetStaticMethodID</span><span style="color:#ABB2BF;">(threadJcl,</span></span>
<span class="line"><span style="color:#98C379;">						&quot;currentThread&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;()Ljava/lang/Thread;&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	jmethodID getNameId</span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">GetMethodID</span><span style="color:#ABB2BF;">(threadJcl, </span><span style="color:#98C379;">&quot;getName&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;()Ljava/lang/String;&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	jmethodID sleepId </span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;"> env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">GetStaticMethodID</span><span style="color:#ABB2BF;">(threadJcl, </span><span style="color:#98C379;">&quot;sleep&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">									&quot;(J)V&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	jobject currentThreadObj</span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">CallStaticObjectMethod</span><span style="color:#ABB2BF;">(threadJcl, currentThreadId);</span></span>
<span class="line"><span style="color:#ABB2BF;">	jstring threadName</span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;">(jstring)</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">CallObjectMethod</span><span style="color:#ABB2BF;">(currentThreadObj, getNameId);</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#C678DD;"> char</span><span style="color:#C678DD;"> *</span><span style="color:#ABB2BF;"> threadNameStr</span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">GetStringUTFChars</span><span style="color:#ABB2BF;">(threadName, </span><span style="color:#D19A66;">NULL</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> i </span><span style="color:#C678DD;">=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; i </span><span style="color:#C678DD;">&lt;</span><span style="color:#D19A66;"> 5</span><span style="color:#ABB2BF;">; i</span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">		jint result </span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;"> env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">MonitorEnter</span><span style="color:#ABB2BF;">(obj);</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (result </span><span style="color:#C678DD;">==</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">			printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;MonitorEnter succ,result-&gt;</span><span style="color:#D19A66;">%d</span><span style="color:#98C379;">,threadName-&gt;</span><span style="color:#D19A66;">%s</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">, result,threadNameStr);</span></span>
<span class="line"><span style="color:#E5C07B;">			env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">CallStaticVoidMethod</span><span style="color:#ABB2BF;">(jcl, sleepId, </span><span style="color:#D19A66;">1000</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			result </span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;"> env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">MonitorExit</span><span style="color:#ABB2BF;">(obj);</span></span>
<span class="line"><span style="color:#61AFEF;">			printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;MonitorExit,result-&gt;</span><span style="color:#D19A66;">%d</span><span style="color:#98C379;">,threadName-&gt;</span><span style="color:#D19A66;">%s</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">, result,threadNameStr);</span></span>
<span class="line"><span style="color:#C678DD;">			break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="nio-操作-api" tabindex="-1"><a class="header-anchor" href="#nio-操作-api"><span>NIO 操作 API</span></a></h2><p>NIO 相关 API 一共 3 个，是 JDK1.4 引入的，所有 JVM 实现必须提供这三个方法，但是不一定实现了，如果未实现则返回 NULL 或者 -1。这三个方法只能操作 DirectByteBuffer，只有他才有保存对应内存地址的 address 属性，GetDirectBufferAddress 方法返回的实际就是该属性的值。具体如下：</p><ul><li>jobject NewDirectByteBuffer(JNIEnv* env, void* address, jlong capacity); 使用指定内存地址和内存大小的一块内存创建一个 java.nio.ByteBuffer 对象，该对象可以返回给 Java 代码，允许 Java 代码读写该内存。如果该块内存是无效的则 Java 代码读写该内存的行为是不确定的，有可能抛出异常，也可能无任何影响。该方法的底层实际 DirectByteBuffer(long addr, int cap) 构造方法。</li><li>void* GetDirectBufferAddress(JNIEnv* env, jobject buf); 获取 java.nio.Buffer 对应内存的内存地址，此方法允许本地代码直接操作 Buffer 对应的内存，该方法的底层实际返回 DirectByteBuffer 的 address 的属性值。</li><li>jlong GetDirectBufferCapacity(JNIEnv* env, jobject buf); 获取 java.nio.Buffer 对应内存的内存容量，此方法的底层实际返回 DirectByteBuffer 的 capacity 属性值。</li></ul><p>以下是一个 JNI NIO 测试，dll 生成参考上一节步骤。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">package</span><span style="color:#C678DD;"> org.example.me</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> java.nio.Buffer</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> java.nio.ByteBuffer</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> java.nio.ByteOrder</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> NIOTest</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    static</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">load</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;D:</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">WorkSpace</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">IDEA</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">codexperiment</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">jdk8</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">src</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">main</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">java</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">NIOTest.dll&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> native</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> test</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Buffer</span><span style="color:#E06C75;font-style:italic;"> test</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> print</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">ByteBuffer</span><span style="color:#E06C75;font-style:italic;"> test</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        test</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">order</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">ByteOrder</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">LITTLE_ENDIAN</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;position-&gt;&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> test</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">position</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot;,limit-&gt;&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> test</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">limit</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#C678DD;">        while</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">test</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">hasRemaining</span><span style="color:#ABB2BF;">()) {</span></span>
<span class="line"><span style="color:#E5C07B;">            System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">test</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getInt</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        ByteBuffer</span><span style="color:#E06C75;"> byteBuffer</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> ByteBuffer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">allocateDirect</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">4</span><span style="color:#56B6C2;"> *</span><span style="color:#D19A66;"> 5</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        //put时默认按照BIG_ENDIAN的方式存储，读取的时候必须保持一致，否则读取的值是错误的</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        //这里为了跟本地代码的默认行为保持一致，使用LITTLE_ENDIAN存储</span></span>
<span class="line"><span style="color:#E5C07B;">        byteBuffer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">order</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">ByteOrder</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">LITTLE_ENDIAN</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">        byteBuffer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">putInt</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">        byteBuffer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">putInt</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">        byteBuffer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">putInt</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">        byteBuffer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">putInt</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">        byteBuffer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">putInt</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">        byteBuffer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">flip</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#61AFEF;">        print</span><span style="color:#ABB2BF;">(byteBuffer);</span></span>
<span class="line"><span style="color:#E5C07B;">        byteBuffer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">flip</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#61AFEF;">        test</span><span style="color:#ABB2BF;">(byteBuffer);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">#include</span><span style="color:#98C379;"> &lt;stdio.h&gt;</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#98C379;"> &quot;NIOTest.h&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">JNIEXPORT </span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> JNICALL Java_org_example_me_NIOTest_test</span></span>
<span class="line"><span style="color:#ABB2BF;">  (JNIEnv </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;"> env, jclass jcl, jobject obj){</span></span>
<span class="line"><span style="color:#ABB2BF;">    jlong size</span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">GetDirectBufferCapacity</span><span style="color:#ABB2BF;">(obj);</span></span>
<span class="line"><span style="color:#61AFEF;">    printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;GetDirectBufferCapacity size-&gt;</span><span style="color:#D19A66;">%d</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">,size);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //C/C++默认是按照小端的方式存储，而java.nio.ByteBuffer默认按照大端的方式存储，参考ByteBuffer的注释</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //为了确保两者一致，应该在Java中对ByteBuffer实例执行order(ByteOrder.LITTLE_ENDIAN);</span></span>
<span class="line"><span style="color:#C678DD;">	int</span><span style="color:#C678DD;"> *</span><span style="color:#ABB2BF;"> test</span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#C678DD;"> *</span><span style="color:#ABB2BF;">)</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">GetDirectBufferAddress</span><span style="color:#ABB2BF;">(obj);</span></span>
<span class="line"><span style="color:#E5C07B;">    test</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">]</span><span style="color:#C678DD;">=</span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">    test</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">]</span><span style="color:#C678DD;">=</span><span style="color:#D19A66;">12</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">    test</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">]</span><span style="color:#C678DD;">=</span><span style="color:#D19A66;">13</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">    test</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">]</span><span style="color:#C678DD;">=</span><span style="color:#D19A66;">14</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">    test</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">]</span><span style="color:#C678DD;">=</span><span style="color:#D19A66;">15</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    jmethodID printId</span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">GetStaticMethodID</span><span style="color:#ABB2BF;">(jcl, </span><span style="color:#98C379;">&quot;print&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;(Ljava/nio/ByteBuffer;)V&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">    printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;GetDirectBufferAddress</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">    env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">CallStaticVoidMethod</span><span style="color:#ABB2BF;">(jcl, printId,obj);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    int</span><span style="color:#ABB2BF;"> test2[]</span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;">{</span><span style="color:#D19A66;">21</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">22</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">23</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">24</span><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //底层调用的是DirectByteBuffer(long addr, int cap)构造方法，该方法自动将cap设置为limit，position设置为0</span></span>
<span class="line"><span style="color:#ABB2BF;">    jobject obj2</span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">NewDirectByteBuffer</span><span style="color:#ABB2BF;">(test2, </span><span style="color:#C678DD;">sizeof</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">*</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">    printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;NewDirectByteBuffer</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">    env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">CallStaticVoidMethod</span><span style="color:#ABB2BF;">(jcl, printId,obj2);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="反射操作-api" tabindex="-1"><a class="header-anchor" href="#反射操作-api"><span>反射操作 API</span></a></h2><p>这些API是提供给 Java 反射核心 API 使用的工具方法，用于将 Java 反射的类转换成 jmethodID 或者 jfieldID，具体如下：</p><ul><li>jmethodID FromReflectedMethod(JNIEnv *env, jobject method); 将 java.lang.reflect.Method 或者java.lang.reflect.Constructor 类实例转换成 jmethodID</li><li>jfieldID FromReflectedField(JNIEnv *env, jobject field); 将 java.lang.reflect.Field 转换成 jfieldID</li><li>jobject ToReflectedMethod(JNIEnv *env, jclass cls,jmethodID methodID, jboolean isStatic); 将某个类的 jmethodID 转换成 java.lang.reflect.Method 或者 java.lang.reflect.Constructor 类实例，如果该方法是静态方法则 isStatic 传 JNI_TRUE，否则传入 JNI_FALSE</li><li>jobject ToReflectedField(JNIEnv *env, jclass cls,jfieldID fieldID, jboolean isStatic); 将某个类的 jfieldID 转换成 java.lang.reflect.Field，如果该字段是静态字段则 isStatic 传 JNI_TRUE，否则传入 JNI_FALSE</li></ul><p>以下是一个 JNI 反射 测试，dll 生成参考上一节步骤。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">package</span><span style="color:#C678DD;"> org.example.me</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> java.lang.reflect.Field</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> java.lang.reflect.Method</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> ReflectTest</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    static</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">load</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;D:</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">WorkSpace</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">IDEA</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">codexperiment</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">jdk8</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">src</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">main</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">java</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">ReflectTest.dll&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> a</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> a2</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> say</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;say&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> say2</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;static say2&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> print</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">ReflectTest</span><span style="color:#E06C75;font-style:italic;"> test</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;ReflectTest a-&gt;&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> test</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">a</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> native</span><span style="color:#E5C07B;"> Method</span><span style="color:#61AFEF;"> test</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Method</span><span style="color:#E06C75;font-style:italic;"> test</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> native</span><span style="color:#E5C07B;"> Field</span><span style="color:#61AFEF;"> test</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Field</span><span style="color:#E06C75;font-style:italic;"> test</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> Exception</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        ReflectTest</span><span style="color:#E06C75;"> reflectTest</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> ReflectTest</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">        Method</span><span style="color:#E06C75;"> method</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> ReflectTest</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getMethod</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;say&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        method </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> reflectTest</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">(method);</span></span>
<span class="line"><span style="color:#E5C07B;">        method</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">invoke</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">        Field</span><span style="color:#E06C75;"> field</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> ReflectTest</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getField</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;a&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        field </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> reflectTest</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">(field);</span></span>
<span class="line"><span style="color:#E5C07B;">        field</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setInt</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">21</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">ReflectTest</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">a2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">#include</span><span style="color:#98C379;"> &lt;stdio.h&gt;</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#98C379;"> &quot;ReflectTest.h&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">JNIEXPORT jobject JNICALL Java_org_example_me_ReflectTest_test__Ljava_lang_reflect_Method_2</span></span>
<span class="line"><span style="color:#ABB2BF;">  (JNIEnv </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;"> env, jobject obj, jobject param){</span></span>
<span class="line"><span style="color:#ABB2BF;">	jmethodID sayId</span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">FromReflectedMethod</span><span style="color:#ABB2BF;">(param);</span></span>
<span class="line"><span style="color:#61AFEF;">	printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;FromReflectedMethod</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">	env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">CallVoidMethod</span><span style="color:#ABB2BF;">(obj, sayId);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	jclass jcl</span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">GetObjectClass</span><span style="color:#ABB2BF;">(obj);</span></span>
<span class="line"><span style="color:#ABB2BF;">	jmethodID say2Id</span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">GetStaticMethodID</span><span style="color:#ABB2BF;">(jcl, </span><span style="color:#98C379;">&quot;say2&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;()V&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	jobject result</span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;"> env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">ToReflectedMethod</span><span style="color:#ABB2BF;">(jcl, say2Id, JNI_TRUE);</span></span>
<span class="line"><span style="color:#61AFEF;">	printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;ToReflectedMethod</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#ABB2BF;"> result;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">JNIEXPORT jobject JNICALL Java_org_example_me_ReflectTest_test__Ljava_lang_reflect_Field_2</span></span>
<span class="line"><span style="color:#ABB2BF;">  (JNIEnv </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">env, jobject obj, jobject param){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	jfieldID aId</span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">FromReflectedField</span><span style="color:#ABB2BF;">(param);</span></span>
<span class="line"><span style="color:#E5C07B;">	env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">SetIntField</span><span style="color:#ABB2BF;">(obj, aId, </span><span style="color:#D19A66;">12</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">	printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;FromReflectedField</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	jclass jcl</span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">GetObjectClass</span><span style="color:#ABB2BF;">(obj);</span></span>
<span class="line"><span style="color:#ABB2BF;">	jmethodID printId</span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">GetMethodID</span><span style="color:#ABB2BF;">(jcl, </span><span style="color:#98C379;">&quot;print&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;(Lorg/example/me/ReflectTest;)V&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">	env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">CallVoidMethod</span><span style="color:#ABB2BF;">(obj, printId,obj);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	jfieldID a2Id</span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">GetStaticFieldID</span><span style="color:#ABB2BF;">(jcl, </span><span style="color:#98C379;">&quot;a2&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;I&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	jobject result</span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">ToReflectedField</span><span style="color:#ABB2BF;">(jcl, a2Id, JNI_TRUE);</span></span>
<span class="line"><span style="color:#61AFEF;">	printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;ToReflectedField</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#ABB2BF;"> result;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,108))])}const u=e(y,[["render",v],["__file","index.html.vue"]]),C=JSON.parse('{"path":"/article/qf0239zm/","title":"jni","lang":"zh-CN","frontmatter":{"title":"jni","tags":["java","jvm"],"createTime":"2025/02/11 22:05:58","permalink":"/article/qf0239zm/","description":"JNI（Java Native Interface）通过 Java 方法调用使用本地代码如 C/C++ 实现的方法 JDK8 生成 JNI 步骤 首先要在 java 文件中定义一个 native 方法 通过 javah 命令生成对应 C++ 的头文件javah -encoding utf-8 -v -o Helloworld.h org.example...","head":[["meta",{"property":"og:url","content":"https://upcloudrabbit.github.io/blog/blog/article/qf0239zm/"}],["meta",{"property":"og:site_name","content":"upcloudrabbit blog"}],["meta",{"property":"og:title","content":"jni"}],["meta",{"property":"og:description","content":"JNI（Java Native Interface）通过 Java 方法调用使用本地代码如 C/C++ 实现的方法 JDK8 生成 JNI 步骤 首先要在 java 文件中定义一个 native 方法 通过 javah 命令生成对应 C++ 的头文件javah -encoding utf-8 -v -o Helloworld.h org.example..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-11T14:46:31.000Z"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"jvm"}],["meta",{"property":"article:modified_time","content":"2025-02-11T14:46:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"jni\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-11T14:46:31.000Z\\",\\"author\\":[]}"]]},"headers":[],"readingTime":{"minutes":39.94,"words":11983},"git":{"updatedTime":1739285191000,"contributors":[{"name":"upcloudrabbit","username":"upcloudrabbit","email":"1814876440@qq.com","commits":2,"avatar":"https://avatars.githubusercontent.com/upcloudrabbit?v=4","url":"https://github.com/upcloudrabbit"}]},"autoDesc":true,"filePathRelative":"java/jni.md","categoryList":[{"id":"93f725","sort":10001,"name":"java"}]}');export{u as comp,C as data};
