import{_ as n,c as a,a as s,o as t}from"./app-CJfFg5nr.js";const o={};function l(i,e){return t(),a("div",null,e[0]||(e[0]=[s(`<p><a href="https://conan.io/" target="_blank" rel="noopener noreferrer">conan</a> 作为一个开源、去中心化和多平台的软件包管理器，用于创建和共享所有本地二进制文件.</p><h1 id="安装" tabindex="-1"><a class="header-anchor" href="#安装"><span>安装</span></a></h1><ol><li>conan 通过 pip 进行安装，因此需要提前安装 python3 环境（这里选择用 conda 安装最新的 python3 版本即可）</li><li>运行命令直接安装<code>pip install conan -i https://pypi.tuna.tsinghua.edu.cn/simple</code></li><li>conan 默认会在<code>用户目录/.conan2</code>可通过添加环境变量<code>CONAN_HOME</code>进行修改</li><li>运行<code>conan version</code>输出则安装完成，然后进行配置文件初始化</li></ol><h1 id="集成-cmake" tabindex="-1"><a class="header-anchor" href="#集成-cmake"><span>集成 CMake</span></a></h1><ol><li>首先需要创建一个标准的 cmake 项目，编辑其中 CMakeLists.txt</li></ol><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">cmake_minimum_required</span><span style="color:#ABB2BF;">(VERSION 3.29)</span></span>
<span class="line"><span style="color:#C678DD;">project</span><span style="color:#ABB2BF;">(codexperiment)</span></span>
<span class="line"><span style="color:#C678DD;">set</span><span style="color:#ABB2BF;">(CMAKE_CXX_STANDARD 20)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 这里以引入 Boost 库作为测试</span></span>
<span class="line"><span style="color:#C678DD;">find_package</span><span style="color:#ABB2BF;">(Boost REQUIRED)</span></span>
<span class="line"><span style="color:#C678DD;">add_executable</span><span style="color:#ABB2BF;">(codexperiment src/main.cpp)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 这里的 target_link_libraries 可以参考后续的命令输出来确认</span></span>
<span class="line"><span style="color:#C678DD;">target_link_libraries</span><span style="color:#ABB2BF;">(codexperiment boost::boost)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>新建 conanfile.txt 文件写入以下内容</li></ol><div class="language-toml line-numbers-mode" data-ext="toml" data-title="toml"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">[</span><span style="color:#61AFEF;">requires</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#FFFFFF;">boost/1.85.0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">[</span><span style="color:#61AFEF;">generators</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#FFFFFF;">CMakeDeps</span></span>
<span class="line"><span style="color:#FFFFFF;">CMakeToolchain</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>运行命令初始化配置文件<code>conan profile detect --force</code>（该文件默认会创建到 根路径/.conan2/profiles 目录下，也可以自己手写然后指定）</li><li>执行命令编译依赖的库文件<code>conan install . --output-folder=cmake-build-debug --build=missing -s -build_type=Debug</code>（这里由于使用的是 CLion 因此输出文件夹直接写 cmake-build-debug，也可以自定义）</li><li>执行命令进行编译<code>cmake . -DCMAKE_TOOLCHAIN_FILE=cmake-build-debug/conan_toolchain.cmake -DCMAKE_BUILD_TYPE=Debug</code>（如果是 Clion 则需要打开设置修改 CMake 设置，添加 CMake Options<code>-DCMAKE_TOOLCHAIN_FILE=cmake-build-debug/conan_toolchain.cmake</code>）</li></ol>`,9)]))}const p=n(o,[["render",l],["__file","index.html.vue"]]),r=JSON.parse('{"path":"/article/nekyd12y/","title":"conan","lang":"zh-CN","frontmatter":{"title":"conan","tags":["package","c&cpp"],"createTime":"2025/02/26 22:52:39","permalink":"/article/nekyd12y/","description":"conan 作为一个开源、去中心化和多平台的软件包管理器，用于创建和共享所有本地二进制文件. 安装 conan 通过 pip 进行安装，因此需要提前安装 python3 环境（这里选择用 conda 安装最新的 python3 版本即可） 运行命令直接安装pip install conan -i https://pypi.tuna.tsinghua.e...","head":[["meta",{"property":"og:url","content":"https://upcloudrabbit.github.io/blog/blog/article/nekyd12y/"}],["meta",{"property":"og:site_name","content":"upcloudrabbit blog"}],["meta",{"property":"og:title","content":"conan"}],["meta",{"property":"og:description","content":"conan 作为一个开源、去中心化和多平台的软件包管理器，用于创建和共享所有本地二进制文件. 安装 conan 通过 pip 进行安装，因此需要提前安装 python3 环境（这里选择用 conda 安装最新的 python3 版本即可） 运行命令直接安装pip install conan -i https://pypi.tuna.tsinghua.e..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-26T15:03:29.000Z"}],["meta",{"property":"article:tag","content":"package"}],["meta",{"property":"article:tag","content":"c&cpp"}],["meta",{"property":"article:modified_time","content":"2025-02-26T15:03:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"conan\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-26T15:03:29.000Z\\",\\"author\\":[]}"]]},"headers":[],"readingTime":{"minutes":1.27,"words":382},"git":{"updatedTime":1740582209000,"contributors":[{"name":"upcloudrabbit","username":"upcloudrabbit","email":"1814876440@qq.com","commits":1,"avatar":"https://avatars.githubusercontent.com/upcloudrabbit?v=4","url":"https://github.com/upcloudrabbit"}]},"autoDesc":true,"filePathRelative":"c&cpp/conan.md","categoryList":[{"id":"76214a","sort":10003,"name":"c&cpp"}]}');export{p as comp,r as data};
