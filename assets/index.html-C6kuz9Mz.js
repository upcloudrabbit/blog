import{_ as p,c as o,a,b as e,f as n,d as t,e as r,r as c,o as i}from"./app-CJfFg5nr.js";const B="/blog/assets/1-4cXcaegO.png",y={};function d(A,s){const l=c("font");return i(),o("div",null,[s[3]||(s[3]=a(`<p>正则替换可以使用内置的 re 包进行，主要用到其中的两个方法：</p><ol><li>re.findall(p1: str, p2: str) -&gt; List 第一个参数是正则表达式，第二个参数是要进行正则匹配的字符串，它返回一个列表表示进行正则匹配到的区域，这种方式可以简单使用，但是再重复多次使用时会有性能问题，可以采用下面的方案提前编译正则表达式</li><li>re.compile(p1: str, [flags: re.x]) 这个方法可以返回一个正则表达式对象 _compile，用作以后的多次匹配，第一个参数是正则字符串，第二个参数为匹配模式，它有以下选项：</li></ol><p>1）re.IGNORECASE：忽略大小写</p><p>2）re.MULTILINE：多行模式</p><p>3）re.DOTALL：点号匹配任意字符，包括换行符</p><p>3）re.UNICODE：启用 Unicode 匹配</p><p>4）re.VERBOSE：启用详细模式，可以在正则表达式中添加注释和空格</p><p>接着可以使用返回的对象（_compile）调用 match、search、findall 可以获取匹配到的结果（匹配不到返回 None）search 可以指定匹配起始和结束下标，match 不行，如果要返回多个匹配结果要选用 findall</p><ul><li>正则提取书写规则，与一般的正则匹配一致，主要用 () 包含需要替换的字符部分，以下为示例（其中的 group 表示 () 的位置，从 1 开始算起）：</li></ul><div class="language-python line-numbers-mode" data-ext="python" data-title="python"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> re</span></span>
<span class="line"><span style="color:#ABB2BF;">pattern </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> re.</span><span style="color:#61AFEF;">compile</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">r</span><span style="color:#E06C75;">&#39;.</span><span style="color:#D19A66;">*</span><span style="color:#E06C75;">山东县</span><span style="color:#D19A66;">(</span><span style="color:#E06C75;">.</span><span style="color:#D19A66;">+)</span><span style="color:#E06C75;">&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 需要匹配的字符串列表</span></span>
<span class="line"><span style="color:#ABB2BF;">strings </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&#39;xxx山东县临沂市兰陵县&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;xxxx山东省山东县平度市&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;xxx山东县威海市文登区&#39;</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 遍历字符串列表并匹配</span></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> string </span><span style="color:#C678DD;">in</span><span style="color:#ABB2BF;"> strings:</span></span>
<span class="line"><span style="color:#ABB2BF;">    match </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> pattern.</span><span style="color:#61AFEF;">match</span><span style="color:#ABB2BF;">(string)</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> match:</span></span>
<span class="line"><span style="color:#ABB2BF;">        result </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> match.</span><span style="color:#61AFEF;">group</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#56B6C2;">        print</span><span style="color:#ABB2BF;">(result)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 临沂市兰陵县  山东县平度市 威海市文登区</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>正则替换书写规则：如果是想去除字符串中的某些字符，则可以这么书写：</li></ul><div class="language-python line-numbers-mode" data-ext="python" data-title="python"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> re</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># [] 里面表示任意匹配</span></span>
<span class="line"><span style="color:#ABB2BF;">reg1 </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> re.</span><span style="color:#61AFEF;">compile</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;[·()（）]&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">s1 </span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &#39;xxxx () ()) yyyy ·&#39;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 替换为空串或者你想指定的字符</span></span>
<span class="line"><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(re.</span><span style="color:#61AFEF;">sub</span><span style="color:#ABB2BF;">(reg1, </span><span style="color:#98C379;">&#39;&#39;</span><span style="color:#ABB2BF;">, s1))</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># xxxx  yyyy</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="conda-移植环境" tabindex="-1"><a class="header-anchor" href="#conda-移植环境"><span>Conda 移植环境</span></a></h1><ol><li>首先在源机器上安装额外组件 <code>conda install -c conda-forge conda-pack</code></li><li>开始打包需要移植的环境 <code>conda pack -n 需要移植的环境名称 -o 新环境名称.tar.gz</code></li><li>上传压缩包到新机器上，在新的机器上安装 conda 的 env 目录下（忘记安装位置可以运行 <code>conda info -e</code>查看）创建和移植环境名称一致的文件夹，然后解压压缩包到这个目录下即可</li><li>最后运行命令查看 <code>conda activate 环境名称</code></li></ol><h1 id="requsets-库发送原始-json-数据" tabindex="-1"><a class="header-anchor" href="#requsets-库发送原始-json-数据"><span>requsets 库发送原始 JSON 数据</span></a></h1><p>python 的 requests 库在发送 json 数据时会对发送的 json 字符串做美化处理（在 key 和 value 之间加空格）有些接口在验签的时候对这个很敏感，因此需要发送原始的 json 字符串。这个时候可以对其进行编码，例如：</p><div class="language-python line-numbers-mode" data-ext="python" data-title="python"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> requests</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">url </span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &#39;https://fx.soopay.net/cberest/v1/payments/payment&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">json_str </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> r</span><span style="color:#E06C75;">&#39;{&quot;payer&quot;:{&quot;payment_method&quot;:&quot;NOT_APPLICABLE&quot;,&quot;payer_info&quot;:{&quot;phone&quot;:&quot;17610496925&quot;},&quot;interface_type&quot;:&quot;SERVER_TO_WEB&quot;,&quot;external_customer_id&quot;:&quot;UMP1499826888843602&quot;,&quot;business_type&quot;:&quot;B2C&quot;},&quot;order&quot;:{&quot;mer_reference_id&quot;:&quot;0612101924800101&quot;,&quot;mer_date&quot;:&quot;20230612&quot;,&quot;amount&quot;:{&quot;total&quot;:&quot;0.01&quot;,&quot;currency&quot;:&quot;CNY&quot;},&quot;order_summary&quot;:&quot;test&quot;,&quot;expire_time&quot;:&quot;360&quot;,&quot;user_ip&quot;:&quot;10.10.70.133&quot;,&quot;sub_orders&quot;:</span><span style="color:#D19A66;">[{&quot;mer_sub_reference_id&quot;:&quot;0612101924800102&quot;,&quot;trans_code&quot;:&quot;01122030&quot;,&quot;amount&quot;:{&quot;total&quot;:&quot;0.01&quot;,&quot;currency&quot;:&quot;CNY&quot;},&quot;is_customs&quot;:&quot;TRUE&quot;,&quot;invoice_id&quot;:&quot;123456&quot;,&quot;items&quot;:[{&quot;mer_item_id&quot;:&quot;0612101924801103&quot;,&quot;type&quot;:&quot;ELECTRONIC&quot;,&quot;name&quot;:&quot;商品1&quot;,&quot;quantity&quot;:&quot;2&quot;,&quot;description&quot;:&quot;描述1&quot;,&quot;amount&quot;:{&quot;total&quot;:&quot;0.01&quot;,&quot;currency&quot;:&quot;CNY&quot;}}]</span><span style="color:#E06C75;">}],&quot;sub_mer_id&quot;:&quot;umfsubmer001&quot;},&quot;notify_url&quot;:&quot;http://10.10.178.36:2216/spay_rest/payments/test/mer&quot;,&quot;ret_url&quot;:&quot;http://10.10.178.36:2213/notify0000V4.jsp&quot;,&quot;risk_info&quot;:{&quot;trans_type&quot;:&quot;02&quot;}}&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">headers </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#98C379;">    &quot;Content-Type&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">r</span><span style="color:#E06C75;">&quot;application/json&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">    &quot;Authorization&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">r</span><span style="color:#E06C75;">&quot;Bearerb9de255a2e11ca6c9b7388c03016b2496c9b655e431d9b64b5fe6bde7d8524d1&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">    &quot;Accept-Language&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">r</span><span style="color:#E06C75;">&quot;ZH&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">    &quot;Charset&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">r</span><span style="color:#E06C75;">&quot;UTF-8&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">    &quot;Signature&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">r</span><span style="color:#E06C75;">&quot;TA0jL8o</span><span style="color:#D19A66;">+</span><span style="color:#E06C75;">P5FrtYAfT/Q73/SC</span><span style="color:#D19A66;">+</span><span style="color:#E06C75;">pkKdCyBYNzcU/g6ZadM3T3W5</span><span style="color:#D19A66;">+</span><span style="color:#E06C75;">6sZuCI1eIIqv1Mr1enA3KGahs0auLtVRGgUw9kQnNL0m8n8noZHrkRMgZbZpyFXh529sy9wBRGgYrb15qSGj73gXQUqfe5IAPZbr1pw0nUdDbq2InyBXdSbpU=&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 需要将原始的 json 的字符串变成字节数组</span></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#E06C75;"> __name__</span><span style="color:#56B6C2;"> ==</span><span style="color:#98C379;"> &#39;__main__&#39;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">    ret </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> requests.</span><span style="color:#61AFEF;">post</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">url</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">url, </span><span style="color:#E06C75;font-style:italic;">headers</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">headers, </span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">json_str.</span><span style="color:#61AFEF;">encode</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;utf-8&#39;</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#56B6C2;">    print</span><span style="color:#ABB2BF;">(ret.</span><span style="color:#61AFEF;">json</span><span style="color:#ABB2BF;">())</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="java-p8-类型-rsa-密钥对应-python-加密、验签、解密" tabindex="-1"><a class="header-anchor" href="#java-p8-类型-rsa-密钥对应-python-加密、验签、解密"><span>Java P8 类型 RSA 密钥对应 Python 加密、验签、解密</span></a></h1><p>java 的 p8 类型证书中的 SHA1withRSA 对应 python pycryptodome 库的 PKCS1_v1_5 算法</p><div class="language-python line-numbers-mode" data-ext="python" data-title="python"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> typing </span><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> Dict</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> Crypto</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> requests</span></span>
<span class="line"><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> Crypto.PublicKey </span><span style="color:#C678DD;">import</span><span style="color:#D19A66;"> RSA</span></span>
<span class="line"><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> Crypto.Signature </span><span style="color:#C678DD;">import</span><span style="color:#D19A66;"> PKCS1_v1_5</span></span>
<span class="line"><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> Crypto.Cipher </span><span style="color:#C678DD;">import</span><span style="color:#D19A66;"> PKCS1_v1_5</span><span style="color:#C678DD;"> as</span><span style="color:#D19A66;"> PKCS1_v1_5_cipher</span></span>
<span class="line"><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> Crypto.Hash </span><span style="color:#C678DD;">import</span><span style="color:#D19A66;"> SHA</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> base64</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> bs4 </span><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> BeautifulSoup</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 需要依赖的环境 BeautifulSoup4 pycryptodome  直接用 pip 安装即可，python 版本 3.7.16</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D19A66;">VERIFY_ENCRYPT_PUBLIC_KEY</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;MIIDNDCCAp2gAwIBAgICLVkwDQYJKoZIhvcNAQEFBQAwPTEOMAwGA1UEBhMFQ0hJTkExKzApBgNVBAMTIkNIS&#39;</span><span style="color:#ABB2BF;"> \\</span></span>
<span class="line"><span style="color:#98C379;">                            &#39;U5BVEVMRUNPTSBDRVJUSUZJQ0FURSBBVVRIT1JJVFkwHhcNMDEwMzIxMTA0NzEzWhcNMDMwMzIxMTA0NzEzWj&#39;</span><span style="color:#ABB2BF;"> \\</span></span>
<span class="line"><span style="color:#98C379;">                            &#39;BcMQswCQYDVQQGEwJDTjERMA8GA1UEChMItPPBrLXn0MUxETAPBgNVBAgTCFNoZW55YW5nMRQwEgYDVQQDEws&#39;</span><span style="color:#ABB2BF;"> \\</span></span>
<span class="line"><span style="color:#98C379;">                            &#39;xOTIuMTY4LjIuMjERMA8GA1UEBxMIU2hlbnlhbmcwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAMZYC7in&#39;</span><span style="color:#ABB2BF;"> \\</span></span>
<span class="line"><span style="color:#98C379;">                            &#39;porVKJCo0pPWdOBjADxzPRF1719G2YskDHVDEuqt6sBRWX+65dXs1AVKROKmi6jdzAQSlp7z3brsB4skHMo9s&#39;</span><span style="color:#ABB2BF;"> \\</span></span>
<span class="line"><span style="color:#98C379;">                            &#39;qdQgPolgZvCersKJFHgTbjjNyCoTyOjwOeRsfcqSJaiehQwPW4fLpNQW/lbvOuFrP8Tn0xWZvOunVPDAgMBAA&#39;</span><span style="color:#ABB2BF;"> \\</span></span>
<span class="line"><span style="color:#98C379;">                            &#39;GjggEiMIIBHjAJBgNVHRMEAjAAMEYGA1UdHwQ/MD0wO6A5oDeGNWxkYXA6Ly8yMDIuMTAzLjY1LjE4L291PWN&#39;</span><span style="color:#ABB2BF;"> \\</span></span>
<span class="line"><span style="color:#98C379;">                            &#39;hLG91PXN5c3RlbSxvdT1jYTEsbz1jdCxjPUNOMC8GCCsGAQUFBwEBBCMwITAfBggrBgEFBQcwAYYTLDIwMi4x&#39;</span><span style="color:#ABB2BF;"> \\</span></span>
<span class="line"><span style="color:#98C379;">                            &#39;MDMuNjUuMTg6OTAwMzAPBghghkgBhvhDDAQDAgEBMBIGCGCGSAGG+EMOBAYWBDI3RjkwGQYIYIZIAYb4QxAED&#39;</span><span style="color:#ABB2BF;"> \\</span></span>
<span class="line"><span style="color:#98C379;">                            &#39;RYLMTkyLjE2OC4yLjIwEAYIYIZIAYb4QxEEBBYCTlQwGgYIYIZIAYb4QxkEDhYMOTe9ybfRt/7O8cb3MBkGCG&#39;</span><span style="color:#ABB2BF;"> \\</span></span>
<span class="line"><span style="color:#98C379;">                            &#39;CGSAGG+EMbBA0WCzE5Mi4xNjguMi4yMA8GCGCGSAGG+EMaBAMCAQMwDQYJKoZIhvcNAQEFBQADgYEAckkH/Ve&#39;</span><span style="color:#ABB2BF;"> \\</span></span>
<span class="line"><span style="color:#98C379;">                            &#39;m5+kXPSGgkowjPwv47XXNbD0hGRMTVXm5PC2kY/wNApQh3lv7Tf5k3UQEoFBACxf6XJtuxf6S0uKBS4ySMKdp&#39;</span><span style="color:#ABB2BF;"> \\</span></span>
<span class="line"><span style="color:#98C379;">                            &#39;bMbOUvtwu6ycQUQTRAs1EBgoh1zyuafU2D3iyHQM8etHxaSePXZOZXFkkvBJemyPz23HAyIn5SKQ2Es=&#39;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> RSAP8</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#C678DD;">    def</span><span style="color:#56B6C2;"> __init__</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;font-style:italic;">self</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;font-style:italic;">pri_key_path</span><span style="color:#ABB2BF;">: </span><span style="color:#56B6C2;">str</span><span style="color:#ABB2BF;">) -&gt; </span><span style="color:#D19A66;">None</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        # 用作请求参数加签</span></span>
<span class="line"><span style="color:#C678DD;">        with</span><span style="color:#56B6C2;"> open</span><span style="color:#ABB2BF;">(pri_key_path, </span><span style="color:#98C379;">&#39;rb&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">as</span><span style="color:#ABB2BF;"> f:</span></span>
<span class="line"><span style="color:#ABB2BF;">            req_sign_private_key </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> f.</span><span style="color:#61AFEF;">read</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#E5C07B;">        self</span><span style="color:#ABB2BF;">.req_sign_cipher </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> PKCS1_v1_5</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">RSA</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">importKey</span><span style="color:#ABB2BF;">(req_sign_private_key))</span></span>
<span class="line"><span style="color:#E5C07B;">        self</span><span style="color:#ABB2BF;">.req_sign_digest </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> SHA</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        # 用作加密部分请求字段以及返回结果的验签</span></span>
<span class="line"><span style="color:#E5C07B;">        self</span><span style="color:#ABB2BF;">.verify_encrypt_key </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> RSA</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">importKey</span><span style="color:#ABB2BF;">(base64.</span><span style="color:#61AFEF;">b64decode</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">VERIFY_ENCRYPT_PUBLIC_KEY</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#E5C07B;">        self</span><span style="color:#ABB2BF;">.encrypt_cipher </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> PKCS1_v1_5_cipher</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.verify_encrypt_key)</span></span>
<span class="line"><span style="color:#E5C07B;">        self</span><span style="color:#ABB2BF;">.verify_cipher </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> PKCS1_v1_5</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.verify_encrypt_key)</span></span>
<span class="line"><span style="color:#E5C07B;">        self</span><span style="color:#ABB2BF;">.verify_encrypt_digest </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> SHA</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">        block_size </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> Crypto.Util.number.</span><span style="color:#61AFEF;">size</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.verify_encrypt_key.n) </span><span style="color:#56B6C2;">/</span><span style="color:#D19A66;"> 8</span></span>
<span class="line"><span style="color:#E5C07B;">        self</span><span style="color:#ABB2BF;">.max_length </span><span style="color:#56B6C2;">=</span><span style="color:#56B6C2;"> int</span><span style="color:#ABB2BF;">(block_size </span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;"> 11</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    def</span><span style="color:#61AFEF;"> sign</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;font-style:italic;">self</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;font-style:italic;">sign_str</span><span style="color:#ABB2BF;">: </span><span style="color:#56B6C2;">str</span><span style="color:#ABB2BF;">) -&gt; </span><span style="color:#56B6C2;">str</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E5C07B;">        self</span><span style="color:#ABB2BF;">.req_sign_digest.</span><span style="color:#61AFEF;">update</span><span style="color:#ABB2BF;">(sign_str.</span><span style="color:#61AFEF;">encode</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;GBK&#39;</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">        sign </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> self</span><span style="color:#ABB2BF;">.req_sign_cipher.</span><span style="color:#61AFEF;">sign</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.req_sign_digest)</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#ABB2BF;"> base64.</span><span style="color:#61AFEF;">b64encode</span><span style="color:#ABB2BF;">(sign).</span><span style="color:#61AFEF;">decode</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    def</span><span style="color:#61AFEF;"> verify</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;font-style:italic;">self</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;font-style:italic;">origin_text</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;font-style:italic;">sign_text</span><span style="color:#ABB2BF;">) -&gt; </span><span style="color:#56B6C2;">bool</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E5C07B;">        self</span><span style="color:#ABB2BF;">.verify_encrypt_digest.</span><span style="color:#61AFEF;">update</span><span style="color:#ABB2BF;">(origin_text.</span><span style="color:#61AFEF;">encode</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;GB18030&quot;</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E5C07B;"> self</span><span style="color:#ABB2BF;">.verify_cipher.</span><span style="color:#61AFEF;">verify</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.verify_encrypt_digest, base64.</span><span style="color:#61AFEF;">b64decode</span><span style="color:#ABB2BF;">(sign_text))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    def</span><span style="color:#61AFEF;"> encrypt</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;font-style:italic;">self</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;font-style:italic;">encrypt_str</span><span style="color:#ABB2BF;">: </span><span style="color:#56B6C2;">str</span><span style="color:#ABB2BF;">) -&gt; </span><span style="color:#56B6C2;">str</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">        encrypt_result </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> b</span><span style="color:#98C379;">&#39;&#39;</span></span>
<span class="line"><span style="color:#C678DD;">        while</span><span style="color:#ABB2BF;"> encrypt_str:</span></span>
<span class="line"><span style="color:#ABB2BF;">            input_data </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> encrypt_str[:</span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.max_length]</span></span>
<span class="line"><span style="color:#ABB2BF;">            encrypt_str </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> encrypt_str[</span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.max_length:]</span></span>
<span class="line"><span style="color:#ABB2BF;">            out_data </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> self</span><span style="color:#ABB2BF;">.encrypt_cipher.</span><span style="color:#61AFEF;">encrypt</span><span style="color:#ABB2BF;">(input_data.</span><span style="color:#61AFEF;">strip</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">encode</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;GBK&#39;</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">            encrypt_result </span><span style="color:#56B6C2;">+=</span><span style="color:#ABB2BF;"> out_data</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#ABB2BF;"> base64.</span><span style="color:#61AFEF;">b64encode</span><span style="color:#ABB2BF;">(encrypt_result).</span><span style="color:#61AFEF;">decode</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 填写密钥文件地址</span></span>
<span class="line"><span style="color:#ABB2BF;">rsa_p8 </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> RSAP8</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;xxxxx</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">6245_.key.p8&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 测试数据拼装</span></span>
<span class="line"><span style="color:#C678DD;">def</span><span style="color:#61AFEF;"> prepare_data</span><span style="color:#ABB2BF;">() -&gt; Dict[</span><span style="color:#56B6C2;">str</span><span style="color:#ABB2BF;">, </span><span style="color:#56B6C2;">object</span><span style="color:#ABB2BF;">]:</span></span>
<span class="line"><span style="color:#ABB2BF;">    req_map </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {}</span></span>
<span class="line"><span style="color:#ABB2BF;">    req_map[</span><span style="color:#98C379;">&#39;card_holder&#39;</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> rsa_p8.</span><span style="color:#61AFEF;">encrypt</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;张三&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    req_map[</span><span style="color:#98C379;">&#39;card_id&#39;</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> rsa_p8.</span><span style="color:#61AFEF;">encrypt</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;111111111111111&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    req_map[</span><span style="color:#98C379;">&#39;charset&#39;</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &#39;UTF-8&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">    req_map[</span><span style="color:#98C379;">&#39;identity_code&#39;</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> rsa_p8.</span><span style="color:#61AFEF;">encrypt</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;111111111111111&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    req_map[</span><span style="color:#98C379;">&#39;identity_type&#39;</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &#39;IDENTITY_CARD&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">    req_map[</span><span style="color:#98C379;">&#39;media_id&#39;</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &#39;13333333333&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">    req_map[</span><span style="color:#98C379;">&#39;media_type&#39;</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &#39;MOBILE&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">    req_map[</span><span style="color:#98C379;">&#39;mer_id&#39;</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &#39;6245&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">    req_map[</span><span style="color:#98C379;">&#39;pay_category&#39;</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &#39;02&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">    req_map[</span><span style="color:#98C379;">&#39;res_format&#39;</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &#39;HTML&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">    req_map[</span><span style="color:#98C379;">&#39;service&#39;</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &#39;pay_confirm&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">    req_map[</span><span style="color:#98C379;">&#39;trade_no&#39;</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &#39;3801261003248915&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">    req_map[</span><span style="color:#98C379;">&#39;version&#39;</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &#39;4.0&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    req_map[</span><span style="color:#98C379;">&#39;sign&#39;</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> rsa_p8.</span><span style="color:#61AFEF;">sign</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;&amp;&#39;</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">join</span><span style="color:#ABB2BF;">([</span><span style="color:#C678DD;">f</span><span style="color:#98C379;">&#39;</span><span style="color:#D19A66;">{</span><span style="color:#ABB2BF;">key</span><span style="color:#D19A66;">}</span><span style="color:#98C379;">=</span><span style="color:#D19A66;">{</span><span style="color:#ABB2BF;">value</span><span style="color:#D19A66;">}</span><span style="color:#98C379;">&#39;</span><span style="color:#C678DD;"> for</span><span style="color:#ABB2BF;"> key, value </span><span style="color:#C678DD;">in</span><span style="color:#ABB2BF;"> req_map.</span><span style="color:#61AFEF;">items</span><span style="color:#ABB2BF;">()]))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    req_map[</span><span style="color:#98C379;">&#39;sign_type&#39;</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &#39;RSA&#39;</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#98C379;">        &#39;url&#39;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;https://fx.soopay.net/cberest/v1/payments/payment&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">        &#39;field&#39;</span><span style="color:#ABB2BF;">: req_map,</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">def</span><span style="color:#61AFEF;"> req</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;font-style:italic;">req_map</span><span style="color:#ABB2BF;">: Dict[</span><span style="color:#56B6C2;">str</span><span style="color:#ABB2BF;">, </span><span style="color:#56B6C2;">object</span><span style="color:#ABB2BF;">]) -&gt; </span><span style="color:#D19A66;">None</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">    headers </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#98C379;">        &#39;Content-Type&#39;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;application/json&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">        &#39;Authorization&#39;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;Bearer2f4ab86d8f99bfb6233d14f93dcf2bfcb0f245745496fd20044e55463db315da&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">        &#39;Accept-Language&#39;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;ZH&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">        &#39;Signature&#39;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;D6XhU4J9WleaDlto0pmxIziwWUaHDJ1qwPT/7o2mRGRmeR8iEnqMBKiiugscwasZ+XWsAXAR7RGZF1ZIGgW6ojHgvIgNQxZBczCMA1Wdgxx5+Vzqx7nHnQzC8bxpoB92DbpYw5nrd5XIAh2VnZCI+S63UUnwkfA6eusKThF0zhU=&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">        &#39;Cookie&#39;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;JSESSIONID=aaa4cL5z2VVHC7H8iFUzy&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">        &#39;Content-Encoding&#39;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;UTF-8&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">        &#39;User-Agent&#39;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;Rich Powered/1.0&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    data </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> req_map[</span><span style="color:#98C379;">&#39;field&#39;</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">    ret </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> requests.</span><span style="color:#61AFEF;">post</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">url</span><span style="color:#56B6C2;">=str</span><span style="color:#ABB2BF;">(req_map[</span><span style="color:#98C379;">&#39;url&#39;</span><span style="color:#ABB2BF;">]), </span><span style="color:#E06C75;font-style:italic;">headers</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">headers, </span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">data, </span><span style="color:#E06C75;font-style:italic;">verify</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">False</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    soup </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> BeautifulSoup</span><span style="color:#ABB2BF;">(ret.content, </span><span style="color:#98C379;">&#39;html.parser&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    meta_content </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> soup.head.</span><span style="color:#61AFEF;">find</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;meta&#39;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;content&#39;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">strip</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#56B6C2;">    print</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">f</span><span style="color:#98C379;">&#39;请求结果：</span><span style="color:#D19A66;">{</span><span style="color:#ABB2BF;">meta_content</span><span style="color:#D19A66;">}</span><span style="color:#98C379;">&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    segs </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> meta_content.</span><span style="color:#61AFEF;">split</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;&amp;&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    origin_res </span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &#39;&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">    result_sign </span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &#39;&#39;</span></span>
<span class="line"><span style="color:#C678DD;">    for</span><span style="color:#ABB2BF;"> item </span><span style="color:#C678DD;">in</span><span style="color:#ABB2BF;"> segs:</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> item.</span><span style="color:#61AFEF;">startswith</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;sign=&#39;</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">            result_sign </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> item[</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">:]</span></span>
<span class="line"><span style="color:#C678DD;">        elif</span><span style="color:#C678DD;"> not</span><span style="color:#ABB2BF;"> item.</span><span style="color:#61AFEF;">startswith</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;sign_type&#39;</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">            origin_res </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> origin_res </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &#39;&amp;&#39;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> item</span></span>
<span class="line"><span style="color:#ABB2BF;">    origin_res </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> origin_res[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">:]</span></span>
<span class="line"><span style="color:#56B6C2;">    print</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">f</span><span style="color:#98C379;">&#39;验签结果：</span><span style="color:#D19A66;">{</span><span style="color:#ABB2BF;">rsa_p8.</span><span style="color:#61AFEF;">verify</span><span style="color:#ABB2BF;">(origin_res, result_sign)</span><span style="color:#D19A66;">}</span><span style="color:#98C379;">&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#E06C75;"> __name__</span><span style="color:#56B6C2;"> ==</span><span style="color:#98C379;"> &#39;__main__&#39;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">    data </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> prepare_data</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#61AFEF;">    req</span><span style="color:#ABB2BF;">(data)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="精度计算-且最终以正常的文本形式显示结果-不以科学计数法展示" tabindex="-1"><a class="header-anchor" href="#精度计算-且最终以正常的文本形式显示结果-不以科学计数法展示"><span>精度计算，且最终以正常的文本形式显示结果（不以科学计数法展示）</span></a></h1>`,21)),e("p",null,[s[1]||(s[1]=n("python 进行精度计算可以使用自带的 decimal 模块，但是用这个模块构造对象时")),t(l,{style:{color:"#DF2A3F"}},{default:r(()=>s[0]||(s[0]=[n("参数必须是字符串")])),_:1}),s[2]||(s[2]=n("，否则依旧为浮点数计算"))]),s[4]||(s[4]=a(`<div class="language-python line-numbers-mode" data-ext="python" data-title="python"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> decimal </span><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> Decimal</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#E06C75;"> __name__</span><span style="color:#56B6C2;"> ==</span><span style="color:#98C379;"> &#39;__main__&#39;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">    num1 </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> Decimal</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;980000&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    num2 </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> Decimal</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;0.0045&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    num3 </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> num1 </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> num2</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    # 4.41E+3</span></span>
<span class="line"><span style="color:#56B6C2;">    print</span><span style="color:#ABB2BF;">(num3.</span><span style="color:#61AFEF;">normalize</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    # 需要格式化处理下，否则整数带0 最终会以科学计数法展示</span></span>
<span class="line"><span style="color:#ABB2BF;">    result </span><span style="color:#56B6C2;">=</span><span style="color:#56B6C2;"> format</span><span style="color:#ABB2BF;">(num3.</span><span style="color:#61AFEF;">normalize</span><span style="color:#ABB2BF;">(), </span><span style="color:#98C379;">&#39;f&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    # 4410</span></span>
<span class="line"><span style="color:#56B6C2;">    print</span><span style="color:#ABB2BF;">(result)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="pycharm-远程-debug" tabindex="-1"><a class="header-anchor" href="#pycharm-远程-debug"><span>Pycharm 远程 Debug</span></a></h1><p>pycharm 可以像 idea 一样进行远程调试</p><ol><li>首先在远程的 python 环境上安装依赖 <code>pip install pydevd-pycharm</code>这个包清华源没有需要指定默认源进行下载，8M左右大约 10 分钟</li><li>在要 debug 的 python 脚本头部添加以下代码</li></ol><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 这里的 ip 是指 pycharm 所在的机器 ip 端口则指定一个不冲突的端口即可</span></span>
<span class="line"><span style="color:#61AFEF;">import</span><span style="color:#98C379;"> pydevd_pycharm</span></span>
<span class="line"><span style="color:#61AFEF;">pydevd_pycharm.settrace(</span><span style="color:#61AFEF;">&#39;ip&#39;</span><span style="color:#61AFEF;">,</span><span style="color:#98C379;"> port=19999,</span><span style="color:#98C379;"> stdoutToServer=True,</span><span style="color:#98C379;"> stderrToServer=True</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>先将 debug 的 python 脚本添加到 pycharm 中，然后新增一个 <code>Python Debug Server</code>这里只用填一个参数 <code>port</code>要和上面代码中的 port 保持一致（这里还有个 Path mappings 可以将远程的脚本与本地进行映射关联，这里可以不填那么在首次运行的时候可以选择自动映射）</li></ol><p><img src="`+B+'" alt="" width="1471" height="1032"></p><ol start="4"><li>本地直接首先运行右上角的 Debug 即可，然后直接执行远程的脚本</li></ol>',8))])}const F=p(y,[["render",d],["__file","index.html.vue"]]),v=JSON.parse('{"path":"/article/dx27iyu0/","title":"python","lang":"zh-CN","frontmatter":{"title":"python","tags":["python"],"createTime":"2025/02/25 21:40:55","permalink":"/article/dx27iyu0/","description":"正则替换可以使用内置的 re 包进行，主要用到其中的两个方法： re.findall(p1: str, p2: str) -> List 第一个参数是正则表达式，第二个参数是要进行正则匹配的字符串，它返回一个列表表示进行正则匹配到的区域，这种方式可以简单使用，但是再重复多次使用时会有性能问题，可以采用下面的方案提前编译正则表达式 re.compile(...","head":[["meta",{"property":"og:url","content":"https://upcloudrabbit.github.io/blog/blog/article/dx27iyu0/"}],["meta",{"property":"og:site_name","content":"upcloudrabbit blog"}],["meta",{"property":"og:title","content":"python"}],["meta",{"property":"og:description","content":"正则替换可以使用内置的 re 包进行，主要用到其中的两个方法： re.findall(p1: str, p2: str) -> List 第一个参数是正则表达式，第二个参数是要进行正则匹配的字符串，它返回一个列表表示进行正则匹配到的区域，这种方式可以简单使用，但是再重复多次使用时会有性能问题，可以采用下面的方案提前编译正则表达式 re.compile(..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-25T13:57:05.000Z"}],["meta",{"property":"article:tag","content":"python"}],["meta",{"property":"article:modified_time","content":"2025-02-25T13:57:05.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"python\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-25T13:57:05.000Z\\",\\"author\\":[]}"]]},"headers":[],"readingTime":{"minutes":5.67,"words":1702},"git":{"updatedTime":1740491825000,"contributors":[{"name":"upcloudrabbit","username":"upcloudrabbit","email":"1814876440@qq.com","commits":1,"avatar":"https://avatars.githubusercontent.com/upcloudrabbit?v=4","url":"https://github.com/upcloudrabbit"}]},"autoDesc":true,"filePathRelative":"python/python.md","categoryList":[{"id":"23eeeb","sort":10005,"name":"python"}]}');export{F as comp,v as data};
