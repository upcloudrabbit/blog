import{_ as n,c as a,a as l,o as p}from"./app-CJfFg5nr.js";const e={};function o(c,s){return p(),a("div",null,s[0]||(s[0]=[l(`<p>C 语言中的宏（macro）是一种预处理指令，可以在编译前将代码中的符号替换为指定的文本。宏可以简化代码并提高可读性，也可以用来实现一些高级的功能。</p><p>语法为 <code>#define 自定义名称 内容</code></p><p>C 语言中有一些宏可能写的特别复杂，可以通过<code>gcc sourcefile -E -o targetfile.i</code>来查看宏展开后情况</p><h1 id="宏常量" tabindex="-1"><a class="header-anchor" href="#宏常量"><span>宏常量</span></a></h1><p>语法 <code>#define MAX(a, b) ((a) &gt; (b) ? (a) : (b))</code>在使用宏定义时，待替换的文本尽量使用 <code>()</code>进行包裹，否则很可能出现运算符优先级问题</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">#define</span><span style="color:#61AFEF;"> MAX</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">) ((a) </span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;"> (b) </span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;"> (a) </span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> (b))</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#61AFEF;">    MAX</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 结果</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">    ((</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;"> (</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;"> (</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> (</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="宏函数" tabindex="-1"><a class="header-anchor" href="#宏函数"><span>宏函数</span></a></h1><p>语法<code>#define SQUARE(x) ((x) * (x))</code></p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">#define</span><span style="color:#61AFEF;"> SQUARE</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">) ((x) </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;"> (x))</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    int</span><span style="color:#ABB2BF;"> y </span><span style="color:#C678DD;">=</span><span style="color:#D19A66;"> 10</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    int</span><span style="color:#ABB2BF;"> square_value </span><span style="color:#C678DD;">=</span><span style="color:#61AFEF;"> SQUARE</span><span style="color:#ABB2BF;">(y);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 结果</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    int</span><span style="color:#ABB2BF;"> y </span><span style="color:#C678DD;">=</span><span style="color:#D19A66;"> 10</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    int</span><span style="color:#ABB2BF;"> square_value </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> ((y) </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;"> (y));</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="宏控制结构" tabindex="-1"><a class="header-anchor" href="#宏控制结构"><span>宏控制结构</span></a></h1><p>宏定义实现了一个调试信息输出的功能。当编译时定义了 DEBUG 宏时，调用 DEBUG_PRINT 会将信息输出到标准错误流中；否则， DEBUG_PRINT 会被替换为空语句</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">#ifdef</span><span style="color:#61AFEF;"> DEBUG</span></span>
<span class="line"><span style="color:#C678DD;">#define</span><span style="color:#61AFEF;"> DEBUG_PRINT</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">fmt</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">...) </span><span style="color:#61AFEF;">fprintf</span><span style="color:#E06C75;">(stderr</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> fmt</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> ##args)</span></span>
<span class="line"><span style="color:#C678DD;">#else</span></span>
<span class="line"><span style="color:#C678DD;">#define</span><span style="color:#61AFEF;"> DEBUG_PRINT</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">fmt</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">...)</span></span>
<span class="line"><span style="color:#C678DD;">#endif</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="字符串处理" tabindex="-1"><a class="header-anchor" href="#字符串处理"><span>字符串处理</span></a></h1><ul><li>使用<code>#</code>可以将宏的参数变为对应的字符串</li><li>使用<code>##</code>可以将参数拼接起来</li></ul><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">#define</span><span style="color:#61AFEF;"> STR</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">) #x</span></span>
<span class="line"><span style="color:#C678DD;">#define</span><span style="color:#61AFEF;"> CONCAT</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">y</span><span style="color:#ABB2BF;">) x##y</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#61AFEF;">    printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;</span><span style="color:#D19A66;">%s</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#61AFEF;">STR</span><span style="color:#ABB2BF;">(hello)); </span></span>
<span class="line"><span style="color:#C678DD;">    int</span><span style="color:#61AFEF;"> CONCAT</span><span style="color:#ABB2BF;">(var, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=</span><span style="color:#D19A66;"> 10</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 结果</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#61AFEF;">    printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;</span><span style="color:#D19A66;">%s</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;hello&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">    int</span><span style="color:#ABB2BF;"> var1 </span><span style="color:#C678DD;">=</span><span style="color:#D19A66;"> 10</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="匿名函数" tabindex="-1"><a class="header-anchor" href="#匿名函数"><span>匿名函数</span></a></h1><p>该宏定义实现了一个匿名函数，计算输入参数的平方。在代码中可以直接使用 SQUARE(y) 来计算 y 的平方（如果宏定义过长可以使用 \\ 继续书写）</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">#define</span><span style="color:#61AFEF;"> SQUARE</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">) ({        </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#61AFEF;">        __typeof__</span><span style="color:#E06C75;">(x)</span><span style="color:#ABB2BF;"> _x </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> x; </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#ABB2BF;">        _x </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;"> _x;              </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#ABB2BF;">    })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    int</span><span style="color:#ABB2BF;"> y </span><span style="color:#C678DD;">=</span><span style="color:#D19A66;"> 10</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    int</span><span style="color:#ABB2BF;"> square_value </span><span style="color:#C678DD;">=</span><span style="color:#61AFEF;"> SQUARE</span><span style="color:#ABB2BF;">(y);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 结果</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    int</span><span style="color:#ABB2BF;"> y </span><span style="color:#C678DD;">=</span><span style="color:#D19A66;"> 10</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    int</span><span style="color:#ABB2BF;"> square_value </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> ({ </span><span style="color:#61AFEF;">__typeof__</span><span style="color:#ABB2BF;">(y) _x </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> y; _x </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;"> _x; });</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="类型泛化" tabindex="-1"><a class="header-anchor" href="#类型泛化"><span>类型泛化</span></a></h1><p>宏可以用于实现类型泛化，即实现一些函数或数据结构，使其适用于多种数据类型。</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">#define</span><span style="color:#61AFEF;"> SORT</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">type</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">arr</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">len</span><span style="color:#ABB2BF;">)  </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#61AFEF;">    qsort</span><span style="color:#E06C75;">(arr</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> len</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;"> sizeof</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">),</span><span style="color:#E06C75;"> compare_##type)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#61AFEF;"> compare_int</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">const</span><span style="color:#C678DD;"> void</span><span style="color:#C678DD;"> *</span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;"> const</span><span style="color:#C678DD;"> void</span><span style="color:#C678DD;"> *</span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#C678DD;"> *</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int*</span><span style="color:#ABB2BF;">)a </span><span style="color:#C678DD;">-</span><span style="color:#C678DD;"> *</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int*</span><span style="color:#ABB2BF;">)b;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#61AFEF;"> compare_double</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">const</span><span style="color:#C678DD;"> void</span><span style="color:#C678DD;"> *</span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;"> const</span><span style="color:#C678DD;"> void</span><span style="color:#C678DD;"> *</span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#C678DD;"> *</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">double*</span><span style="color:#ABB2BF;">)a </span><span style="color:#C678DD;">-</span><span style="color:#C678DD;"> *</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">double*</span><span style="color:#ABB2BF;">)b;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    int</span><span style="color:#ABB2BF;"> arr1</span><span style="color:#C678DD;">[]</span><span style="color:#C678DD;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#C678DD;">    double</span><span style="color:#ABB2BF;"> arr2</span><span style="color:#C678DD;">[]</span><span style="color:#C678DD;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#D19A66;">3.0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1.0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4.0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2.0</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#61AFEF;">    SORT</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">, arr1, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">    SORT</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">double</span><span style="color:#ABB2BF;">, arr2, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 结果</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    int</span><span style="color:#ABB2BF;"> arr1</span><span style="color:#C678DD;">[]</span><span style="color:#C678DD;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#C678DD;">    double</span><span style="color:#ABB2BF;"> arr2</span><span style="color:#C678DD;">[]</span><span style="color:#C678DD;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#D19A66;">3.0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1.0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4.0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2.0</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">    qsort</span><span style="color:#ABB2BF;">(arr1, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">sizeof</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">), compare_int);</span></span>
<span class="line"><span style="color:#61AFEF;">    qsort</span><span style="color:#ABB2BF;">(arr2, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">sizeof</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">double</span><span style="color:#ABB2BF;">), compare_double);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="调试" tabindex="-1"><a class="header-anchor" href="#调试"><span>调试</span></a></h1><p>宏可以用于调试程序，比如在程序中加入调试信息、跟踪程序执行等。这里的 __FILE__、__LINE__属于内置宏，分别代表当前文件、当前行</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">#define</span><span style="color:#61AFEF;"> DEBUG</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">fmt</span><span style="color:#ABB2BF;">, ...) </span><span style="color:#61AFEF;">printf</span><span style="color:#E06C75;">(</span><span style="color:#98C379;">&quot;[DEBUG] </span><span style="color:#D19A66;">%s</span><span style="color:#98C379;">:</span><span style="color:#D19A66;">%d</span><span style="color:#98C379;">: &quot;</span><span style="color:#E06C75;"> fmt </span><span style="color:#98C379;">&quot;</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> __FILE__</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> __LINE__</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> ##__VA_ARGS__)</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    int</span><span style="color:#ABB2BF;"> x </span><span style="color:#C678DD;">=</span><span style="color:#D19A66;"> 10</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">    DEBUG</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;x = </span><span style="color:#D19A66;">%d</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">, x);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="防止重复定义" tabindex="-1"><a class="header-anchor" href="#防止重复定义"><span>防止重复定义</span></a></h1><p>如果头文件被多次包含，会导致编译错误或者程序出现意料之外的行为。具体来说，头文件被多次包含可能会产生以下两种问题：</p><ol><li>编译错误：如果头文件中定义了类型、变量、函数等，多次包含会导致这些定义重复，从而导致编译错误。</li><li>意外行为：如果头文件中定义了宏、内联函数等，多次包含会导致这些定义重复，从而导致程序出现意外的行为。</li></ol><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">#ifndef</span><span style="color:#61AFEF;"> _HEADER_H_</span></span>
<span class="line"><span style="color:#C678DD;">#define</span><span style="color:#61AFEF;"> _HEADER_H_</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 头文件内容</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">#endif</span><span style="color:#7F848E;font-style:italic;"> /* _HEADER_H_ */</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="条件编译" tabindex="-1"><a class="header-anchor" href="#条件编译"><span>条件编译</span></a></h1><p>配合 makefile 提供的额外参数可构建不同的平台，不同环境下的代码</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">#ifdef</span><span style="color:#61AFEF;"> DEBUG</span></span>
<span class="line"><span style="color:#C678DD;">#define</span><span style="color:#61AFEF;"> LOG</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">fmt</span><span style="color:#ABB2BF;">, ...) </span><span style="color:#61AFEF;">printf</span><span style="color:#E06C75;">(</span><span style="color:#98C379;">&quot;[DEBUG] &quot;</span><span style="color:#E06C75;"> fmt </span><span style="color:#98C379;">&quot;</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> ##__VA_ARGS__)</span></span>
<span class="line"><span style="color:#C678DD;">#else</span></span>
<span class="line"><span style="color:#C678DD;">#define</span><span style="color:#61AFEF;"> LOG</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">fmt</span><span style="color:#ABB2BF;">, ...)</span></span>
<span class="line"><span style="color:#C678DD;">#endif</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">LOG</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;x = </span><span style="color:#D19A66;">%d</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> x</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;">   // 在DEBUG模式下输出调试信息，否则不输出</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="复杂宏示例" tabindex="-1"><a class="header-anchor" href="#复杂宏示例"><span>复杂宏示例</span></a></h1><h2 id="jvm-源码-hotspot-src-share-vm-memory-allocation-hpp" tabindex="-1"><a class="header-anchor" href="#jvm-源码-hotspot-src-share-vm-memory-allocation-hpp"><span>jvm 源码 <code>hotspot/src/share/vm/memory/allocation.hpp</code></span></a></h2><p>关于类型判断的宏定义如下</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">#define</span><span style="color:#61AFEF;"> METASPACE_OBJ_TYPES_DO</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">f</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#61AFEF;">  f</span><span style="color:#E06C75;">(Unknown)</span><span style="color:#56B6C2;"> \\</span></span>
<span class="line"><span style="color:#61AFEF;">  f</span><span style="color:#E06C75;">(Class)</span><span style="color:#56B6C2;"> \\</span></span>
<span class="line"><span style="color:#61AFEF;">  f</span><span style="color:#E06C75;">(Symbol)</span><span style="color:#56B6C2;"> \\</span></span>
<span class="line"><span style="color:#61AFEF;">  f</span><span style="color:#E06C75;">(TypeArrayU1)</span><span style="color:#56B6C2;"> \\</span></span>
<span class="line"><span style="color:#61AFEF;">  f</span><span style="color:#E06C75;">(TypeArrayU2)</span><span style="color:#56B6C2;"> \\</span></span>
<span class="line"><span style="color:#61AFEF;">  f</span><span style="color:#E06C75;">(TypeArrayU4)</span><span style="color:#56B6C2;"> \\</span></span>
<span class="line"><span style="color:#61AFEF;">  f</span><span style="color:#E06C75;">(TypeArrayU8)</span><span style="color:#56B6C2;"> \\</span></span>
<span class="line"><span style="color:#61AFEF;">  f</span><span style="color:#E06C75;">(TypeArrayOther)</span><span style="color:#56B6C2;"> \\</span></span>
<span class="line"><span style="color:#61AFEF;">  f</span><span style="color:#E06C75;">(Method)</span><span style="color:#56B6C2;"> \\</span></span>
<span class="line"><span style="color:#61AFEF;">  f</span><span style="color:#E06C75;">(ConstMethod)</span><span style="color:#56B6C2;"> \\</span></span>
<span class="line"><span style="color:#61AFEF;">  f</span><span style="color:#E06C75;">(MethodData)</span><span style="color:#56B6C2;"> \\</span></span>
<span class="line"><span style="color:#61AFEF;">  f</span><span style="color:#E06C75;">(ConstantPool)</span><span style="color:#56B6C2;"> \\</span></span>
<span class="line"><span style="color:#61AFEF;">  f</span><span style="color:#E06C75;">(ConstantPoolCache)</span><span style="color:#56B6C2;"> \\</span></span>
<span class="line"><span style="color:#61AFEF;">  f</span><span style="color:#E06C75;">(Annotation)</span><span style="color:#56B6C2;"> \\</span></span>
<span class="line"><span style="color:#61AFEF;">  f</span><span style="color:#E06C75;">(MethodCounters)</span><span style="color:#56B6C2;"> \\</span></span>
<span class="line"><span style="color:#61AFEF;">  f</span><span style="color:#E06C75;">(Deallocated)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">#define</span><span style="color:#61AFEF;"> METASPACE_OBJ_TYPE_DECLARE</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">) name ## Type,</span></span>
<span class="line"><span style="color:#C678DD;">#define</span><span style="color:#61AFEF;"> METASPACE_OBJ_TYPE_NAME_CASE</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">) case name ## Type: </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> #name;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">enum</span><span style="color:#ABB2BF;"> Type {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Types are MetaspaceObj::ClassType, MetaspaceObj::SymbolType, etc</span></span>
<span class="line"><span style="color:#61AFEF;">METASPACE_OBJ_TYPES_DO</span><span style="color:#ABB2BF;">(METASPACE_OBJ_TYPE_DECLARE)</span></span>
<span class="line"><span style="color:#ABB2BF;">_number_of_types</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">static</span><span style="color:#C678DD;"> const</span><span style="color:#C678DD;"> char</span><span style="color:#C678DD;"> *</span><span style="color:#61AFEF;"> type_name</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">Type </span><span style="color:#E06C75;font-style:italic;">type</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">switch</span><span style="color:#ABB2BF;">(type) {</span></span>
<span class="line"><span style="color:#61AFEF;">METASPACE_OBJ_TYPES_DO</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">METASPACE_OBJ_TYPE_NAME_CASE</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">default</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#61AFEF;">  ShouldNotReachHere</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#D19A66;"> NULL</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最终代码为</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">enum</span><span style="color:#ABB2BF;"> Type {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // Types are MetaspaceObj::ClassType, MetaspaceObj::SymbolType, etc</span></span>
<span class="line"><span style="color:#ABB2BF;">    UnknownType,</span></span>
<span class="line"><span style="color:#ABB2BF;">    ClassType,</span></span>
<span class="line"><span style="color:#ABB2BF;">    SymbolType,</span></span>
<span class="line"><span style="color:#ABB2BF;">    TypeArrayU1Type,</span></span>
<span class="line"><span style="color:#ABB2BF;">    TypeArrayU2Type,</span></span>
<span class="line"><span style="color:#ABB2BF;">    TypeArrayU4Type,</span></span>
<span class="line"><span style="color:#ABB2BF;">    TypeArrayU8Type,</span></span>
<span class="line"><span style="color:#ABB2BF;">    TypeArrayOtherType,</span></span>
<span class="line"><span style="color:#ABB2BF;">    MethodType,</span></span>
<span class="line"><span style="color:#ABB2BF;">    ConstMethodType,</span></span>
<span class="line"><span style="color:#ABB2BF;">    MethodDataType,</span></span>
<span class="line"><span style="color:#ABB2BF;">    ConstantPoolType,</span></span>
<span class="line"><span style="color:#ABB2BF;">    ConstantPoolCacheType,</span></span>
<span class="line"><span style="color:#ABB2BF;">    AnnotationType,</span></span>
<span class="line"><span style="color:#ABB2BF;">    MethodCountersType,</span></span>
<span class="line"><span style="color:#ABB2BF;">    DeallocatedType,</span></span>
<span class="line"><span style="color:#ABB2BF;">    _number_of_types</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  static</span><span style="color:#C678DD;"> const</span><span style="color:#C678DD;"> char</span><span style="color:#C678DD;"> *</span><span style="color:#61AFEF;"> type_name</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">Type </span><span style="color:#E06C75;font-style:italic;">type</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    switch</span><span style="color:#ABB2BF;">(type) {</span></span>
<span class="line"><span style="color:#C678DD;">    case</span><span style="color:#ABB2BF;"> UnknownType: </span><span style="color:#C678DD;">return</span><span style="color:#98C379;"> &quot;Unknown&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    case</span><span style="color:#ABB2BF;"> ClassType: </span><span style="color:#C678DD;">return</span><span style="color:#98C379;"> &quot;Class&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    case</span><span style="color:#ABB2BF;"> SymbolType: </span><span style="color:#C678DD;">return</span><span style="color:#98C379;"> &quot;Symbol&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    case</span><span style="color:#ABB2BF;"> TypeArrayU1Type: </span><span style="color:#C678DD;">return</span><span style="color:#98C379;"> &quot;TypeArrayU1&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    case</span><span style="color:#ABB2BF;"> TypeArrayU2Type: </span><span style="color:#C678DD;">return</span><span style="color:#98C379;"> &quot;TypeArrayU2&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    case</span><span style="color:#ABB2BF;"> TypeArrayU4Type: </span><span style="color:#C678DD;">return</span><span style="color:#98C379;"> &quot;TypeArrayU4&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    case</span><span style="color:#ABB2BF;"> TypeArrayU8Type: </span><span style="color:#C678DD;">return</span><span style="color:#98C379;"> &quot;TypeArrayU8&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    case</span><span style="color:#ABB2BF;"> TypeArrayOtherType: </span><span style="color:#C678DD;">return</span><span style="color:#98C379;"> &quot;TypeArrayOther&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    case</span><span style="color:#ABB2BF;"> MethodType: </span><span style="color:#C678DD;">return</span><span style="color:#98C379;"> &quot;Method&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    case</span><span style="color:#ABB2BF;"> ConstMethodType: </span><span style="color:#C678DD;">return</span><span style="color:#98C379;"> &quot;ConstMethod&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    case</span><span style="color:#ABB2BF;"> MethodDataType: </span><span style="color:#C678DD;">return</span><span style="color:#98C379;"> &quot;MethodData&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    case</span><span style="color:#ABB2BF;"> ConstantPoolType: </span><span style="color:#C678DD;">return</span><span style="color:#98C379;"> &quot;ConstantPool&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    case</span><span style="color:#ABB2BF;"> ConstantPoolCacheType: </span><span style="color:#C678DD;">return</span><span style="color:#98C379;"> &quot;ConstantPoolCache&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    case</span><span style="color:#ABB2BF;"> AnnotationType: </span><span style="color:#C678DD;">return</span><span style="color:#98C379;"> &quot;Annotation&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    case</span><span style="color:#ABB2BF;"> MethodCountersType: </span><span style="color:#C678DD;">return</span><span style="color:#98C379;"> &quot;MethodCounters&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    case</span><span style="color:#ABB2BF;"> DeallocatedType: </span><span style="color:#C678DD;">return</span><span style="color:#98C379;"> &quot;Deallocated&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    default</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#61AFEF;">      ShouldNotReachHere</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">      return</span><span style="color:#D19A66;"> NULL</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,37)]))}const r=n(e,[["render",o],["__file","index.html.vue"]]),i=JSON.parse('{"path":"/article/j3k55ocb/","title":"macro","lang":"zh-CN","frontmatter":{"title":"macro","tags":["macro","c&cpp"],"createTime":"2025/02/26 22:54:10","permalink":"/article/j3k55ocb/","description":"C 语言中的宏（macro）是一种预处理指令，可以在编译前将代码中的符号替换为指定的文本。宏可以简化代码并提高可读性，也可以用来实现一些高级的功能。 语法为 #define 自定义名称 内容 C 语言中有一些宏可能写的特别复杂，可以通过gcc sourcefile -E -o targetfile.i来查看宏展开后情况 宏常量 语法 #define M...","head":[["meta",{"property":"og:url","content":"https://upcloudrabbit.github.io/blog/blog/article/j3k55ocb/"}],["meta",{"property":"og:site_name","content":"upcloudrabbit blog"}],["meta",{"property":"og:title","content":"macro"}],["meta",{"property":"og:description","content":"C 语言中的宏（macro）是一种预处理指令，可以在编译前将代码中的符号替换为指定的文本。宏可以简化代码并提高可读性，也可以用来实现一些高级的功能。 语法为 #define 自定义名称 内容 C 语言中有一些宏可能写的特别复杂，可以通过gcc sourcefile -E -o targetfile.i来查看宏展开后情况 宏常量 语法 #define M..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-26T15:03:29.000Z"}],["meta",{"property":"article:tag","content":"macro"}],["meta",{"property":"article:tag","content":"c&cpp"}],["meta",{"property":"article:modified_time","content":"2025-02-26T15:03:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"macro\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-26T15:03:29.000Z\\",\\"author\\":[]}"]]},"headers":[],"readingTime":{"minutes":3.71,"words":1112},"git":{"updatedTime":1740582209000,"contributors":[{"name":"upcloudrabbit","username":"upcloudrabbit","email":"1814876440@qq.com","commits":1,"avatar":"https://avatars.githubusercontent.com/upcloudrabbit?v=4","url":"https://github.com/upcloudrabbit"}]},"autoDesc":true,"filePathRelative":"c&cpp/macro.md","categoryList":[{"id":"76214a","sort":10003,"name":"c&cpp"}]}');export{r as comp,i as data};
