import{_ as i,c as r,a as t,b as s,f as n,d as a,e as o,r as d,o as p}from"./app-CJfFg5nr.js";const c="/blog/assets/1-MbPtQo1B.png",u="/blog/assets/2-Z4XwAvDU.png",b="/blog/assets/3-1cENGBm1.png",m="/blog/assets/4-CNCdF0r_.png",g="/blog/assets/5-DKG3bAf6.png",k="/blog/assets/6-CsYxWgr4.png",v="/blog/assets/7-8xyZzuB5.png",h="/blog/assets/8-DwM-6FU-.png",j="/blog/assets/9-DuJ2PzT1.png",y={};function f(w,e){const l=d("font");return p(),r("div",null,[e[15]||(e[15]=t('<p>以下是一些 jdk 下载地址：</p><table><thead><tr><th>下载地址</th><th>说明</th></tr></thead><tbody><tr><td><a href="https://www.oracle.com/java/technologies/downloads/archive/" target="_blank" rel="noopener noreferrer">oracle jdk</a></td><td>所有 GA 版本构建好的 jdk，但是需要登录</td></tr><tr><td><a href="https://jdk.java.net/archive/" target="_blank" rel="noopener noreferrer">open jdk</a></td><td>jdk7 以后的 jdk 及源码</td></tr><tr><td><a href="https://adoptium.net/zh-CN/temurin/archive/" target="_blank" rel="noopener noreferrer">eclipse jdk</a></td><td>也叫 adoptiumjdk 可下载主流版本的 jdk 及源码</td></tr><tr><td><a href="https://www.azul.com/downloads/?package=jdk&amp;show-old-builds=true#zulu" target="_blank" rel="noopener noreferrer">azul jdk</a></td><td>也叫 zulujdk 可下载所有版本及超前版本构建好的 jdk</td></tr><tr><td><a href="https://bell-sw.com/pages/downloads" target="_blank" rel="noopener noreferrer">bellsoft jdk</a></td><td>可下载自 jdk8 以后的 jdk</td></tr><tr><td><a href="https://github.com/openjdk/jdk" target="_blank" rel="noopener noreferrer">github openjdk</a></td><td>openjdk 的 github 地址，仅包含源码</td></tr><tr><td><a href="https://www.injdk.cn/" target="_blank" rel="noopener noreferrer">injdk</a></td><td>各开源 jdk 发行版网址整合</td></tr></tbody></table><p>这些 jdk 均从 openjdk 构建除 oracle jdk 外其它 jdk 无版权争议，且功能基本一致，只是各自的构建平台和版本号不同，部分内置一些对自家产品 api 的支持。</p><p>jdk 源码编译通用流程是直接解压源码后运行根路径下的 <code>configure</code>进行配置检查，然后 <code>make all</code>进行编译。以下是对配置参数和编译参数的解析，详情<a href="https://github.com/openjdk/jdk/blob/master/doc/building.md" target="_blank" rel="noopener noreferrer">参考</a></p><h1 id="jdk8-源码编译" tabindex="-1"><a class="header-anchor" href="#jdk8-源码编译"><span>jdk8 源码编译</span></a></h1>',5)),s("ol",null,[e[4]||(e[4]=t('<li>vmware 下使用 ubuntu-24.04-server （<a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu-releases/24.04/ubuntu-24.04-live-server-amd64.iso" target="_blank" rel="noopener noreferrer">清华源</a>下载，注意平台）进行编译，这里推荐使用 5.4.0 版本的 gcc 和 g++（可直接编译通过）, 可以直接使用 ubuntu-16</li><li>需要提前下载 <a href="https://wiki.openjdk.org/display/jdk8u" target="_blank" rel="noopener noreferrer">jdk8</a> 的源码以及编译好的 <a href="https://download.java.net/openjdk/jdk7u75/ri/openjdk-7u75-src-b13-18_dec_2014.zip" target="_blank" rel="noopener noreferrer">jdk7</a> （这里也可以使用 jdk8 作为 bootjdk）分别解压</li><li>安装需要的依赖 <code>apt install -y libx11-dev libxext-dev libxrender-dev libxtst-dev libxt-dev build-essential gawk m4 libasound2-dev xorg-dev xutils-dev x11proto-print-dev binutils libcups2-dev zip unzip file</code></li><li>修改以下两个文件 <code>jdk/src/solaris/native/java/net/PlainDatagramSocketImpl.c``jdk/src/solaris/native/java/net/PlainSocketImpl.c</code>注释掉其中的 <code>#include&lt;sys/sysctl.h&gt;</code>（较高版本已不含 sys/sysctl.h 文件）</li>',4)),s("li",null,[e[1]||(e[1]=n("进入 jdk8 源码目录然后执行命令 ")),e[2]||(e[2]=s("code",null,"chmod +x ./configure && ./configure --with-target-bits=64 --with-boot-jdk=bootjdk路径（之前下载的 jdk7 解压后目录） --with-debug-level=slowdebug --enable-debug-symbols --disable-zip-debug-info",-1)),e[3]||(e[3]=n("，")),a(l,{style:{color:"#DF2A3F"}},{default:o(()=>e[0]||(e[0]=[n("命令执行完成后一定要查看当前的的 gcc、g++ 版本是否符合要求，安装依赖时有可能修改了 gcc、g++ 版本")])),_:1})]),e[5]||(e[5]=s("li",null,[n("无问题后开始编译 "),s("code",null,"make JOBS=6"),n("（大概 5~10 分钟）")],-1)),e[6]||(e[6]=s("li",null,[n("编译后的 jdk 在 build 目录下，执行命令查看 "),s("code",null,"./build/linux-x86_64-normal-server-slowdebug/jdk/bin/java -version"),n("正常输出则编译成功")],-1))]),e[16]||(e[16]=s("h1",{id:"jdk-高版本源码编译",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#jdk-高版本源码编译"},[s("span",null,"jdk 高版本源码编译")])],-1)),s("ol",null,[e[11]||(e[11]=s("li",null,"jdk8 以后推荐使用 gcc、g++ 7.5.0 版本，实测 jdk11、jdk17、jdk21 都能编译通过， 可以直接使用 ubuntu-18",-1)),e[12]||(e[12]=s("li",null,[n("安装需要的依赖 "),s("code",null,"apt install -y libx11-dev libxext-dev libxrender-dev libxtst-dev libxt-dev build-essential gawk m4 libasound2-dev xorg-dev xutils-dev x11proto-print-dev binutils libcups2-dev zip unzip file autoconf")],-1)),s("li",null,[e[8]||(e[8]=n("进入 jdk 源码目录然后执行命令 ")),e[9]||(e[9]=s("code",null,"chmod +x ./configure && ./configure --with-target-bits=64 --with-boot-jdk=bootjdk路径（之前下载的 bootjdk 解压后目录）--disable-warnings-as-errors --with-debug-level=slowdebug --with-native-debug-symbols=internal",-1)),e[10]||(e[10]=n("，")),a(l,{style:{color:"#DF2A3F"}},{default:o(()=>e[7]||(e[7]=[n("命令执行完成后一定要查看当前的的 gcc、g++ 版本是否符合要求，安装依赖时有可能修改了 gcc、g++ 版本")])),_:1})]),e[13]||(e[13]=s("li",null,[n("无问题后开始编译 "),s("code",null,"make all"),n("（大概 5~10 分钟）")],-1)),e[14]||(e[14]=s("li",null,[n("编译后的 jdk 在 build 目录下，执行命令查看 "),s("code",null,"./build/linux-x86_64-normal-server-slowdebug/jdk/bin/java -version"),n("正常输出则编译成功")],-1))]),e[17]||(e[17]=t('<h1 id="jdk8-使用-clion-调试" tabindex="-1"><a class="header-anchor" href="#jdk8-使用-clion-调试"><span>jdk8 使用 clion 调试</span></a></h1><ol><li>clion 在本地创建任意项目，然后删除所有文件</li><li>配置远程信息，然后从远程主机下载编译好的 jdk 源码</li></ol><p><img src="'+c+'" alt="" width="1804" height="1377"></p><p><img src="'+u+'" alt="" width="1418" height="1542"></p><ol start="3"><li>配置 debug remote（这里远程主机需要安装 gdb、gdbserver）</li></ol><p><img src="'+b+'" alt="" width="1305" height="1308"></p><ol start="4"><li>远程主机使用 gdbserver 启动程序监听，在任意地方下好断点后 clion 运行 debug remote</li></ol><p><img src="'+m+'" alt="" width="1705" height="185"></p><ol start="5"><li>以上流程也可以做成自动化的</li></ol><p>直接添加一个</p><p><img src="'+g+'" alt="" width="1305" height="1438"></p><p><img src="'+k+`" alt="" width="1305" height="1438"></p><p>远程 DEBUG 最好写成脚本，直接运行会卡住。建议使用 screen 管理，nohup 在重启时还需要 kill，脚本如下：</p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">JAVA_HOME</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;/home/lhc/workspaces/Clion/jdk/jdk8u422-b05/build/linux-x86_64-normal-server-slowdebug/jdk&quot;</span></span>
<span class="line"><span style="color:#E06C75;">JAR_HOME</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;/home/lhc/workspaces/Clion/jdk/jdk8u422-b05/jar&quot;</span></span>
<span class="line"><span style="color:#E06C75;">APP_NAME</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;javaagent&quot;</span></span>
<span class="line"><span style="color:#E06C75;">PORT</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;1234&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">screen</span><span style="color:#D19A66;"> -wipe</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#61AFEF;"> screen</span><span style="color:#D19A66;"> -list</span><span style="color:#ABB2BF;"> | </span><span style="color:#61AFEF;">grep</span><span style="color:#D19A66;"> -q</span><span style="color:#98C379;"> &quot;</span><span style="color:#E06C75;">$APP_NAME</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">; </span><span style="color:#C678DD;">then</span></span>
<span class="line"><span style="color:#61AFEF;">  screen</span><span style="color:#D19A66;"> -S</span><span style="color:#E06C75;"> $APP_NAME</span><span style="color:#D19A66;"> -X</span><span style="color:#98C379;"> quit</span></span>
<span class="line"><span style="color:#C678DD;">fi</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">sleep</span><span style="color:#D19A66;"> 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">screen</span><span style="color:#D19A66;"> -dmS</span><span style="color:#E06C75;"> $APP_NAME</span><span style="color:#98C379;"> bash</span><span style="color:#D19A66;"> -c</span><span style="color:#98C379;"> &quot;gdbserver :</span><span style="color:#E06C75;">$PORT</span><span style="color:#E06C75;"> $JAVA_HOME</span><span style="color:#98C379;">/bin/java -javaagent:</span><span style="color:#E06C75;">$JAR_HOME</span><span style="color:#98C379;">/sourcetest-1.0-SNAPSHOT.jar -jar </span><span style="color:#E06C75;">$JAR_HOME</span><span style="color:#98C379;">/sourcetest-1.0-SNAPSHOT.jar&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">sleep</span><span style="color:#D19A66;"> 3</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="jdk-高版本使用-clion-调试" tabindex="-1"><a class="header-anchor" href="#jdk-高版本使用-clion-调试"><span>jdk 高版本使用 clion 调试</span></a></h1><p>jdk 12 之后可以更加方便的使用 clion 进行调试，不再需要依赖 CMakeLists，改方法参考 clion 官方<a href="https://blog.jetbrains.com/clion/2020/03/openjdk-with-clion/" target="_blank" rel="noopener noreferrer">链接</a></p><ol><li>在源码的根路径下执行命令<code>make compile-commands</code>生成 compile-commands.json 文件</li><li>使用 clion 直接 open 这个文件，选择 open as project，等待索引项目完成</li></ol><p><img src="`+v+'" alt="" width="1277" height="426"></p><ol start="3"><li>如果是本地调试需要先添加一个 Custom Build Targets，里面其实随便填一下就行（如果是要修改源码并编译调试的就需要正常填写 make all 和 make clean 命令）</li></ol><p><img src="'+h+'" alt="" width="2679" height="1552"></p><ol start="4"><li>填写完成后添加 Custom Build Application</li></ol><p><img src="'+j+'" alt="" width="3151" height="1590"></p><h2 id="linux-下配置" tabindex="-1"><a class="header-anchor" href="#linux-下配置"><span>Linux 下配置</span></a></h2><ol><li>如果使用<code>GDB</code>调试需要忽略<code>SIGSEGV</code>信号，需要在打开的目录下创建<code>.gdbinit</code>文件，内容为</li></ol><div class="language-plain line-numbers-mode" data-ext="plain" data-title="plain"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>handle SIGSEGV nostop noprint</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="2"><li>然后在用户目录下创建<code>~/.config/gdb/gdbinit</code>文件，内容为</li></ol><div class="language-plain line-numbers-mode" data-ext="plain" data-title="plain"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>add-auto-load-safe-path 上一步创建的 .gdbinit 路径（或者直接写 / 表示全路径加载）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="macos-下配置" tabindex="-1"><a class="header-anchor" href="#macos-下配置"><span>MacOS 下配置</span></a></h2><ol><li>如果使用的是<code>lldb</code>那么需要忽略两种信号，首先在打开的目录下创建<code>.lldbinit</code>文件，内容为</li></ol><div class="language-plain line-numbers-mode" data-ext="plain" data-title="plain"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>process handle --pass true --stop false --notify false SIGILL SIGSEGV</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="2"><li>然后在用户目录下创建<code>.lldbinit</code> 文件，开启自动加载项目配置文件，内容为</li></ol><div class="language-plain line-numbers-mode" data-ext="plain" data-title="plain"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>settings set target.load-cwd-lldbinit true</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>',32))])}const C=i(y,[["render",f],["__file","index.html.vue"]]),A=JSON.parse('{"path":"/article/t04w874u/","title":"hotspot源码编译","lang":"zh-CN","frontmatter":{"title":"hotspot源码编译","tags":["java","hotspot","jvm"],"createTime":"2025/02/18 19:56:50","permalink":"/article/t04w874u/","description":"以下是一些 jdk 下载地址： 这些 jdk 均从 openjdk 构建除 oracle jdk 外其它 jdk 无版权争议，且功能基本一致，只是各自的构建平台和版本号不同，部分内置一些对自家产品 api 的支持。 jdk 源码编译通用流程是直接解压源码后运行根路径下的 configure进行配置检查，然后 make all进行编译。以下是对配置参数和...","head":[["meta",{"property":"og:url","content":"https://upcloudrabbit.github.io/blog/blog/article/t04w874u/"}],["meta",{"property":"og:site_name","content":"upcloudrabbit blog"}],["meta",{"property":"og:title","content":"hotspot源码编译"}],["meta",{"property":"og:description","content":"以下是一些 jdk 下载地址： 这些 jdk 均从 openjdk 构建除 oracle jdk 外其它 jdk 无版权争议，且功能基本一致，只是各自的构建平台和版本号不同，部分内置一些对自家产品 api 的支持。 jdk 源码编译通用流程是直接解压源码后运行根路径下的 configure进行配置检查，然后 make all进行编译。以下是对配置参数和..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-18T12:05:00.000Z"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"hotspot"}],["meta",{"property":"article:tag","content":"jvm"}],["meta",{"property":"article:modified_time","content":"2025-02-18T12:05:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"hotspot源码编译\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-18T12:05:00.000Z\\",\\"author\\":[]}"]]},"headers":[],"readingTime":{"minutes":4.55,"words":1365},"git":{"updatedTime":1739880300000,"contributors":[{"name":"upcloudrabbit","username":"upcloudrabbit","email":"1814876440@qq.com","commits":1,"avatar":"https://avatars.githubusercontent.com/upcloudrabbit?v=4","url":"https://github.com/upcloudrabbit"}]},"autoDesc":true,"filePathRelative":"java/hotspot源码编译.md","categoryList":[{"id":"93f725","sort":10001,"name":"java"}]}');export{C as comp,A as data};
