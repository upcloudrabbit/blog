import{_ as n,c as a,a as l,o as p}from"./app-CJfFg5nr.js";const e="/blog/assets/1-BwPq5zor.png",o={};function t(c,s){return p(),a("div",null,s[0]||(s[0]=[l(`<p>实现如下：</p><ol><li>该版本的实现完全依赖 wait / notify</li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Test</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> i </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#E5C07B;"> Object</span><span style="color:#E06C75;"> object </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Object</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        Thread</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;">t</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Thread</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E5C07B;">        Thread</span><span style="color:#E06C75;"> t1</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Thread</span><span style="color:#ABB2BF;">(()</span><span style="color:#C678DD;">-&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">            while</span><span style="color:#ABB2BF;"> (i </span><span style="color:#56B6C2;">&lt;</span><span style="color:#D19A66;"> 100</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">                synchronized</span><span style="color:#ABB2BF;"> (object) {</span></span>
<span class="line"><span style="color:#C678DD;">                    try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">                        object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">wait</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                        // t2 线程唤醒 t1 线程后理应等待进入 wait，但是如果在 t2 线程进入 wait</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                        // 的这段时间内 t1 线程迅速输出并 notify 则此时会让 t1、t2 两个线程都</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                        // 进入 wait 造成活锁。因此 t1 线程 notify 之前必须保证 t2 线程状态</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                        // 是 wait</span></span>
<span class="line"><span style="color:#C678DD;">                        while</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">State</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">WAITING</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">equals</span><span style="color:#ABB2BF;">(t[</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">getState</span><span style="color:#ABB2BF;">())) {</span></span>
<span class="line"><span style="color:#E5C07B;">                            object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">wait</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">                        }</span></span>
<span class="line"><span style="color:#E5C07B;">                        System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;t2：B&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> i++);</span></span>
<span class="line"><span style="color:#E5C07B;">                        object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">notify</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">                    } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">Exception</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">                    }</span></span>
<span class="line"><span style="color:#ABB2BF;">                }</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        });</span></span>
<span class="line"><span style="color:#E5C07B;">        Thread</span><span style="color:#E06C75;"> t2</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Thread</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">-&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">            while</span><span style="color:#ABB2BF;"> (i </span><span style="color:#56B6C2;">&lt;</span><span style="color:#D19A66;"> 100</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">                synchronized</span><span style="color:#ABB2BF;"> (object) {</span></span>
<span class="line"><span style="color:#C678DD;">                    try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">                        while</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">State</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">WAITING</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">equals</span><span style="color:#ABB2BF;">(t[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">getState</span><span style="color:#ABB2BF;">())) {</span></span>
<span class="line"><span style="color:#E5C07B;">                            object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">wait</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">                        }</span></span>
<span class="line"><span style="color:#E5C07B;">                        System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;t1：A&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> i++);</span></span>
<span class="line"><span style="color:#E5C07B;">                        object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">notify</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">                        object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">wait</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">                    } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">Exception</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">                    }</span></span>
<span class="line"><span style="color:#ABB2BF;">                }</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        });</span></span>
<span class="line"><span style="color:#ABB2BF;">        t[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> t1;</span></span>
<span class="line"><span style="color:#ABB2BF;">        t[</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> t2;</span></span>
<span class="line"><span style="color:#E5C07B;">        t1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">();	</span></span>
<span class="line"><span style="color:#E5C07B;">        t2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>也可以不使用 wait / notify，以下代码需要在 jvm 启动参数上添加 <code>-Xint</code>使 jvm 仅在解释器模式下运行，不触发 c1、c2 的代码优化。以下代码在不加参数 <code>-Xint</code>时也能<s>得到期望的结果</s>，但是一旦把循环次数加到 2000 以上就会开始频繁出现线程安全问题，本质还是需要注意 c1、c2 对代码的优化。</li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Test</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> i </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        new</span><span style="color:#61AFEF;"> Thread</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">-&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">            while</span><span style="color:#ABB2BF;"> (i </span><span style="color:#56B6C2;">&lt;</span><span style="color:#D19A66;"> 99</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">                if</span><span style="color:#ABB2BF;"> (i </span><span style="color:#56B6C2;">%</span><span style="color:#D19A66;"> 2</span><span style="color:#56B6C2;"> ==</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">                    System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;t1: A&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">                    i++;</span></span>
<span class="line"><span style="color:#ABB2BF;">                }</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }).</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">        new</span><span style="color:#61AFEF;"> Thread</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">-&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">            while</span><span style="color:#ABB2BF;"> (i </span><span style="color:#56B6C2;">&lt;</span><span style="color:#D19A66;"> 100</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">                if</span><span style="color:#ABB2BF;"> (i </span><span style="color:#56B6C2;">%</span><span style="color:#D19A66;"> 2</span><span style="color:#56B6C2;"> ==</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">                    System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;t2: B&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">                    i++;</span></span>
<span class="line"><span style="color:#ABB2BF;">                }</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }).</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="wait-notify-顺序输出-a、b、c" tabindex="-1"><a class="header-anchor" href="#wait-notify-顺序输出-a、b、c"><span>wait / notify 顺序输出 A、B、C</span></a></h1><p>解决方案：既然两个线程可用 wait / notify 交替输出，那么把3个线程当作 2 个线程问题即可解决，将线程 1 视为 1 个整体，2、3视为一个整体。此时需要两个对象监视器分别为 object1、object2，object1 控制 1、2，object2 控制 2，3。具体如图所示：</p><p><img src="`+e+`" alt="" width="831" height="493"></p><p>一个循环流程如下表：</p><table><thead><tr><th style="text-align:left;">时刻</th><th style="text-align:left;">t1线程状态</th><th style="text-align:left;">t2线程状态</th><th style="text-align:left;">t3线程状态</th></tr></thead><tbody><tr><td style="text-align:left;"><code>0</code></td><td style="text-align:left;"><code>runing</code></td><td style="text-align:left;"><code>wait(object1)</code></td><td style="text-align:left;"><code>wait(object2)</code></td></tr><tr><td style="text-align:left;"><code>1</code></td><td style="text-align:left;"><code>nofity(object1)</code></td><td style="text-align:left;"><code>wait(object1)</code></td><td style="text-align:left;"><code>wait(object2)</code></td></tr><tr><td style="text-align:left;"><code>2</code></td><td style="text-align:left;"><code>wait(object1)</code></td><td style="text-align:left;"><code>runing</code></td><td style="text-align:left;"><code>wait(object2)</code></td></tr><tr><td style="text-align:left;"><code>3</code></td><td style="text-align:left;"><code>wait(object1)</code></td><td style="text-align:left;"><code>notify(object2)</code></td><td style="text-align:left;"><code>wait(object2)</code></td></tr><tr><td style="text-align:left;"><code>4</code></td><td style="text-align:left;"><code>wait(object1)</code></td><td style="text-align:left;"><code>wait(object2)</code></td><td style="text-align:left;"><code>runing</code></td></tr><tr><td style="text-align:left;"><code>5</code></td><td style="text-align:left;"><code>wait(object1)</code></td><td style="text-align:left;"><code>wait(object2)</code></td><td style="text-align:left;"><code>notify(object2)</code></td></tr><tr><td style="text-align:left;"><code>6</code></td><td style="text-align:left;"><code>wait(object1)</code></td><td style="text-align:left;"><code>notify(object1)</code></td><td style="text-align:left;"><code>wait(object2)</code></td></tr><tr><td style="text-align:left;"><code>7</code></td><td style="text-align:left;"><code>runing</code></td><td style="text-align:left;"><code>wait(object1)</code></td><td style="text-align:left;"><code>wait(object2)</code></td></tr></tbody></table><p>代码如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> test</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> i </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#E5C07B;"> Object</span><span style="color:#E06C75;"> object1 </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Object</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#E5C07B;"> Object</span><span style="color:#E06C75;"> object2 </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Object</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        Thread</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;">t</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Thread</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E5C07B;">        Thread</span><span style="color:#E06C75;"> t1</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Thread</span><span style="color:#ABB2BF;">(()</span><span style="color:#C678DD;">-&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">            while</span><span style="color:#ABB2BF;"> (i </span><span style="color:#56B6C2;">&lt;</span><span style="color:#D19A66;"> 10000</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">                synchronized</span><span style="color:#ABB2BF;"> (object2) {</span></span>
<span class="line"><span style="color:#C678DD;">                    try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">                        object2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">wait</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">                        System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;t3：&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> i++);</span></span>
<span class="line"><span style="color:#C678DD;">                        while</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">State</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">WAITING</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">equals</span><span style="color:#ABB2BF;">(t[</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">getState</span><span style="color:#ABB2BF;">())) {</span></span>
<span class="line"><span style="color:#E5C07B;">                            object2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">wait</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">                        }</span></span>
<span class="line"><span style="color:#E5C07B;">                        object2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">notify</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">                    } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">Exception</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">                    }</span></span>
<span class="line"><span style="color:#ABB2BF;">                }</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        });</span></span>
<span class="line"><span style="color:#E5C07B;">        Thread</span><span style="color:#E06C75;"> t2</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Thread</span><span style="color:#ABB2BF;">(()</span><span style="color:#C678DD;">-&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">            while</span><span style="color:#ABB2BF;"> (i </span><span style="color:#56B6C2;">&lt;</span><span style="color:#D19A66;"> 10000</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">                synchronized</span><span style="color:#ABB2BF;"> (object1) {</span></span>
<span class="line"><span style="color:#C678DD;">                    try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">                        object1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">wait</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">                        synchronized</span><span style="color:#ABB2BF;"> (object2) {</span></span>
<span class="line"><span style="color:#E5C07B;">                            System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;t2：&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> i++);</span></span>
<span class="line"><span style="color:#C678DD;">                            while</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">State</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">WAITING</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">equals</span><span style="color:#ABB2BF;">(t[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">getState</span><span style="color:#ABB2BF;">())) {</span></span>
<span class="line"><span style="color:#E5C07B;">                                object2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">wait</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">                            }</span></span>
<span class="line"><span style="color:#E5C07B;">                            object2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">notify</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">                            object2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">wait</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">                        }</span></span>
<span class="line"><span style="color:#C678DD;">                        while</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">State</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">WAITING</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">equals</span><span style="color:#ABB2BF;">(t[</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">getState</span><span style="color:#ABB2BF;">())) {</span></span>
<span class="line"><span style="color:#E5C07B;">                            object1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">wait</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">                        }</span></span>
<span class="line"><span style="color:#E5C07B;">                        object1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">notify</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">                    } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">Exception</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">                    }</span></span>
<span class="line"><span style="color:#ABB2BF;">                }</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        });</span></span>
<span class="line"><span style="color:#E5C07B;">        Thread</span><span style="color:#E06C75;"> t3</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Thread</span><span style="color:#ABB2BF;">(()</span><span style="color:#C678DD;">-&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">            while</span><span style="color:#ABB2BF;"> (i </span><span style="color:#56B6C2;">&lt;</span><span style="color:#D19A66;"> 10000</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">                synchronized</span><span style="color:#ABB2BF;"> (object1) {</span></span>
<span class="line"><span style="color:#C678DD;">                    try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">                        System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;t1：&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> i++);</span></span>
<span class="line"><span style="color:#C678DD;">                        while</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">State</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">WAITING</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">equals</span><span style="color:#ABB2BF;">(t[</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">getState</span><span style="color:#ABB2BF;">())) {</span></span>
<span class="line"><span style="color:#E5C07B;">                            object1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">wait</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">                        }</span></span>
<span class="line"><span style="color:#E5C07B;">                        object1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">notify</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">                        object1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">wait</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">                    } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">Exception</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">                    }</span></span>
<span class="line"><span style="color:#ABB2BF;">                }</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        });</span></span>
<span class="line"><span style="color:#ABB2BF;">        t[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> t1;</span></span>
<span class="line"><span style="color:#ABB2BF;">        t[</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> t2;</span></span>
<span class="line"><span style="color:#ABB2BF;">        t[</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> t3;</span></span>
<span class="line"><span style="color:#E5C07B;">        t3</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">        t2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">        t1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12)]))}const r=n(o,[["render",t],["__file","index.html.vue"]]),i=JSON.parse('{"path":"/article/bdav8vie/","title":"wait/notify交替输出100以内的数","lang":"zh-CN","frontmatter":{"title":"wait/notify交替输出100以内的数","tags":["java","interview"],"createTime":"2025/02/10 22:30:53","permalink":"/article/bdav8vie/","description":"实现如下： 该版本的实现完全依赖 wait / notify 也可以不使用 wait / notify，以下代码需要在 jvm 启动参数上添加 -Xint使 jvm 仅在解释器模式下运行，不触发 c1、c2 的代码优化。以下代码在不加参数 -Xint时也能，但是一旦把循环次数加到 2000 以上就会开始频繁出现线程安全问题，本质还是需要注意 c1、c2...","head":[["meta",{"property":"og:url","content":"https://upcloudrabbit.github.io/blog/blog/article/bdav8vie/"}],["meta",{"property":"og:site_name","content":"upcloudrabbit blog"}],["meta",{"property":"og:title","content":"wait/notify交替输出100以内的数"}],["meta",{"property":"og:description","content":"实现如下： 该版本的实现完全依赖 wait / notify 也可以不使用 wait / notify，以下代码需要在 jvm 启动参数上添加 -Xint使 jvm 仅在解释器模式下运行，不触发 c1、c2 的代码优化。以下代码在不加参数 -Xint时也能，但是一旦把循环次数加到 2000 以上就会开始频繁出现线程安全问题，本质还是需要注意 c1、c2..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-12T14:00:06.000Z"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"interview"}],["meta",{"property":"article:modified_time","content":"2025-02-12T14:00:06.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"wait/notify交替输出100以内的数\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-12T14:00:06.000Z\\",\\"author\\":[]}"]]},"headers":[],"readingTime":{"minutes":2.28,"words":685},"git":{"updatedTime":1739368806000,"contributors":[{"name":"upcloudrabbit","username":"upcloudrabbit","email":"1814876440@qq.com","commits":3,"avatar":"https://avatars.githubusercontent.com/upcloudrabbit?v=4","url":"https://github.com/upcloudrabbit"}]},"autoDesc":true,"filePathRelative":"java/wait_notify.md","categoryList":[{"id":"93f725","sort":10001,"name":"java"}]}');export{r as comp,i as data};
